---
- import_playbook: install_1password.yaml
# TODO not on coreman4
# - import_playbook: install_discord.yaml
# TODO only on coreman4
# - import_playbook: install_docker.yaml
- import_playbook: install_vagrant.yaml
# TODO not on coreman4
# - import_playbook: install_zulip.yaml

- name: enable and start system services
  gather_facts: false
  hosts: all
  pre_tasks:
    - setup:
        gather_subset:
          - distribution
          - system
      tags:
        - always
  tasks:
    - name: enable and start SSH server (Linux)
      systemd:
        name: sshd
        state: started
        enabled: true
      when: ansible_system == "Linux"

# See https://askubuntu.com/a/1251037 and https://askubuntu.com/a/191013.
- name: disable sleeping for Gnome Display Manager (GDM)
  gather_facts: false
  hosts: all
  pre_tasks:
    - setup:
        gather_subset:
          - system
  tags:
    - gnome
  vars:
    - power_schema: org.gnome.settings-daemon.plugins.power
    - sleep_inactive_ac_timeout_key: sleep-inactive-ac-timeout
    - sleep_inactive_ac_timeout_value: 0
    - sleep_inactive_ac_type_key: sleep-inactive-ac-type
    - sleep_inactive_ac_type_value: nothing
  tasks:
    # TODO check if dbus-launch is available
    #
    # - name: check if gsettings is available before running the config command
    #   # Use an explicit location, just because it's easier.
    #   file:
    #     path: /usr/bin/gsettings
    #     state: file
    #   register: has_gsettings
    #   when: ansible_system == "Linux"
    - name: get current GDM sleep timeout value
      command: "gsettings get {{ power_schema }} {{ sleep_inactive_ac_timeout_key }}"
      changed_when: false
      register: gdm_current_sleep_timeout
      when:
        - ansible_system == "Linux"
        # - has_gsettings.rc == 0
    - name: disable sleeping timeout for GDM if not already set
      # https://askubuntu.com/a/311988
      command: "dbus-launch --exit-with-session gsettings set {{ power_schema }} {{ sleep_inactive_ac_timeout_key }} {{ sleep_inactive_ac_timeout_value }}"
      register: gdm_disabled_sleep_timeout
      # GNOME is bad
      failed_when: '"WARNING" in gdm_disabled_sleep_timeout.stderr'
      when:
        - ansible_system == "Linux"
        # - has_gsettings.rc == 0
        - gdm_current_sleep_timeout.stdout != sleep_inactive_ac_timeout_value
    - name: get current GDM sleep type value
      command: "gsettings get {{ power_schema }} {{ sleep_inactive_ac_type_key }}"
      changed_when: false
      register: gdm_current_sleep_type
      when:
        - ansible_system == "Linux"
        # - has_gsettings.rc == 0
    - name: disable sleeping method for GDM if not already set
      command: "dbus-launch --exit-with-session gsettings set {{ power_schema }} {{ sleep_inactive_ac_type_key }} {{ sleep_inactive_ac_type_value }}"
      register: gdm_disabled_sleep_type
      # GNOME is bad
      failed_when: '"WARNING" in gdm_disabled_sleep_type.stderr'
      when:
        - ansible_system == "Linux"
        # - has_gsettings.rc == 0
        - gdm_current_sleep_type.stdout != sleep_inactive_ac_type_value
    # - name: determine if GDM was running
    # TODO
    # - name: restart GDM if config changed and it was running
