---
# These have logic that works standalone.
# FIXME Don't install Anaconda right now, since its location isn't correct
# - import_playbook: install_anaconda.yaml
- import_playbook: install_github_repos.yaml
- import_playbook: install_languages.yaml

- name: deploy dotfiles
  hosts: localhost
  gather_facts: false
  vars:
    dotdrop_manual_install_file: ~/dotfiles/dotdrop/dotdrop.sh
    dotdrop_public_config: ~/dotfiles/config.yaml
    dotdrop_private_config: ~/dotfiles/dotfiles-private/config.yaml
  pre_tasks:
    - setup:
        gather_subset:
          - distribution
          - system
  tags:
    - dotdrop
  tasks:
    - name: install dotdrop dependencies
      command: python3 -m pip install --user -r ~/dotfiles/dotdrop/requirements.txt
      register: pip_install
      changed_when: "'Successfully installed' in pip_install.stdout"
      when: ansible_distribution != "Archlinux"
    - name: bootstrap dotdrop
      command: ~/dotfiles/dotdrop/bootstrap.sh
      args:
        creates: "{{ dotdrop_manual_install_file }}"
      when: ansible_distribution != "Archlinux"
    - name: deploy from public dotfiles on Arch
      command: "dotdrop install -c {{ dotdrop_public_config }}"
      when: ansible_distribution == "Archlinux"
    - name: deploy from public dotfiles not on Arch
      command: "{{ dotdrop_manual_install_file }} install -c {{ dotdrop_public_config }}"
      register: deploy_public_notarch
      changed_when: "'0 dotfile(s) installed.' not in deploy_public_notarch.stdout"
      when: ansible_distribution != "Archlinux"
    - name: deploy from private dotfiles on Arch
      command: "dotdrop install -c {{ dotdrop_private_config }}"
      when: ansible_distribution == "Archlinux"
    - name: deploy from private dotfiles not on Arch
      command: "{{ dotdrop_manual_install_file }} install -c {{ dotdrop_private_config }}"
      register: deploy_private_notarch
      changed_when: "'0 dotfile(s) installed.' not in deploy_private_notarch.stdout"
      when: ansible_distribution != "Archlinux"

- name: enable and start user services
  gather_facts: false
  hosts: localhost
  pre_tasks:
    - setup:
        gather_subset:
          - distribution
          - system
  tasks:
    # - name: enable and start Dropbox
    #   systemd:
    #     name: dropbox
    #     state: started
    #     enabled: true
    #     scope: user
    #   when: ansible_distribution == "Archlinux"
    - name: enable and start Emacs daemon
      systemd:
        name: emacs
        state: started
        enabled: true
        scope: user
      when: ansible_system == "Linux"

# See https://askubuntu.com/a/1251037 and https://askubuntu.com/a/191013.
- name: disable sleeping for Gnome Display Manager (GDM)
  gather_facts: false
  hosts: localhost
  pre_tasks:
    - setup:
        gather_subset:
          - system
  tags:
    - gnome
  tasks:
    # - name: check if gsettings is available before running the config command
    #   # Use an explicit location, just because it's easier.
    #   file:
    #     path: /usr/bin/gsettings
    #     state: file
    #   register: has_gsettings
    #   when: ansible_system == "Linux"
    - name: get current GDM sleep value
      command: gsettings get org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout
      changed_when: false
      register: gdm_current_sleep_value
      when:
        - ansible_system == "Linux"
        # - has_gsettings.rc == 0
    - name: disable sleeping for GDM if not already set
      command: gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 0
      # notify:
      #   - restart GDM
      when:
        - ansible_system == "Linux"
        # - has_gsettings.rc == 0
        - gdm_current_sleep_value.stdout != "0"
  # TODO
  # - needs to run as root
  # - only restart if it was running to begin with
  #
  # handlers:
  #   - name: restart GDM
  #     service:
  #       name: gdm
  #       state: restarted

# - name: set keyboard layout
# TODO localectl --no-convert set-x11-keymap "" "" "" caps:ctrl_modifier
