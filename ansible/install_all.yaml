---
# These have logic that works standalone.
# FIXME Don't install Anaconda right now, since its location isn't correct
# - import_playbook: install_anaconda.yaml
- import_playbook: install_github_repos.yaml
- import_playbook: install_languages.yaml

- name: make ~/pythonpath for loose Python code
  hosts: localhost
  gather_facts: false
  tasks:
    - name: make ~/pythonpath for loose Python code
      file:
        path: ~/pythonpath
        state: directory

- name: deploy dotfiles
  hosts: localhost
  gather_facts: false
  vars:
    dotdrop_manual_install_file: ~/dotfiles/dotdrop/dotdrop.sh
    dotdrop_public_config: ~/dotfiles/config.yaml
    dotdrop_private_config: ~/dotfiles/dotfiles-private/config.yaml
  pre_tasks:
    - setup:
        gather_subset:
          - distribution
          - system
  tags:
    - dotdrop
  tasks:
    - name: install dotdrop dependencies
      command: python3 -m pip install --user -r ~/dotfiles/dotdrop/requirements.txt
      register: pip_install
      changed_when: "'Successfully installed' in pip_install.stdout"
      when: ansible_distribution != "Archlinux"
    - name: bootstrap dotdrop
      command: ~/dotfiles/dotdrop/bootstrap.sh
      args:
        creates: "{{ dotdrop_manual_install_file }}"
      when: ansible_distribution != "Archlinux"
    - name: deploy from public dotfiles on Arch
      command: "dotdrop install -c {{ dotdrop_public_config }}"
      when: ansible_distribution == "Archlinux"
    - name: deploy from public dotfiles not on Arch
      command: "{{ dotdrop_manual_install_file }} install -c {{ dotdrop_public_config }}"
      register: deploy_public_notarch
      changed_when: "'0 dotfile(s) installed.' not in deploy_public_notarch.stdout"
      when: ansible_distribution != "Archlinux"
    - name: deploy from private dotfiles on Arch
      command: "dotdrop install -c {{ dotdrop_private_config }}"
      when: ansible_distribution == "Archlinux"
    - name: deploy from private dotfiles not on Arch
      command: "{{ dotdrop_manual_install_file }} install -c {{ dotdrop_private_config }}"
      register: deploy_private_notarch
      changed_when: "'0 dotfile(s) installed.' not in deploy_private_notarch.stdout"
      when: ansible_distribution != "Archlinux"

- name: enable and start user services
  gather_facts: false
  hosts: localhost
  pre_tasks:
    - setup:
        gather_subset:
          - distribution
          - system
  tasks:
    # - name: enable and start Dropbox
    #   systemd:
    #     name: dropbox
    #     state: started
    #     enabled: true
    #     scope: user
    #   when: ansible_distribution == "Archlinux"
    - name: enable and start Emacs daemon
      systemd:
        name: emacs
        state: started
        enabled: true
        scope: user
      when: ansible_system == "Linux"

- name: apply dconf settings
  tags:
    - gnome
  gather_facts: false
  hosts: localhost
  pre_tasks:
    - setup:
        gather_subset:
          - system
  vars_files:
    - dconf_settings.yaml
  tasks:
    - include_tasks: apply_dconf_settings.yaml
      loop: "{{ dconf_settings }}"
      loop_control:
        loop_var: dconf_setting_triple
      when:
        - ansible_system == "Linux"

- name: apply XDG settings
  gather_facts: false
  hosts: localhost
  pre_tasks:
    - setup:
        gather_subset:
          - system
  tasks:
    - name: get current default browser
      command: xdg-settings get default-web-browser
      register: current_default_web_browser
      when:
        - ansible_system == "Linux"
    - name: set default browser to Firefox
      command: xdg-settings set default-web-browser firefox.desktop
      when:
        - current_default_web_browser.stdout != "firefox.desktop"
        - ansible_system == "Linux"

# - name: set keyboard layout
# TODO localectl --no-convert set-x11-keymap "" "" "" caps:ctrl_modifier
