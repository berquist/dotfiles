* General configuration
  :PROPERTIES:
  :all-set:  true
  :END:

#+begin_src emacs-lisp
  (setq user-full-name "Eric J. Berquist"
        user-mail-address "eric.berquist@gmail.com")

  (add-to-list 'load-path "~/.emacs.d/lisp/")

  ;; took some tricks from http://www.aaronbedra.com/emacs.d/

  ;; What's the difference between setq and setq-default?
  ;; See here: http://stackoverflow.com/questions/18172728/the-difference-between-setq-and-setq-default-in-emacs-lisp

  ;; transient-mark-mode: ...
  ;; visual-line-mode: ...
  (setq-default transient-mark-mode t
                visual-line-mode t
                line-number-mode t
                column-number-mode t
                cursor-type '(hbar . 2))

  ;; Enable maximum syntax highlighting wherever possible.
  (setq global-font-lock-mode t
        font-lock-maximum-decoration t)

  ;; Bells are annoying, stop ringing!
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)

  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; death to tabs, tabs are evil
  (setq-default indent-tabs-mode nil
                tab-width 4)

  ;; What platform are we on? darwin, gnu/linux are the most likely
  ;; answers.
  (defvar system-type-as-string (prin1-to-string system-type))
  (defun sys () system-type-as-string)

  ;; Set the path properly on OS X.
  (when (memq window-system '(mac ns))
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize)))
#+end_src

* Backups/autosaving
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  ;; let's live on the edge and disable backup and autosave
  (setq backup-inhibited t
        auto-save-default nil)

  ;; (setq backup-directory-alist `(("." . "~/.saves")))
  ;; (setq backup-by-copying t)
  ;; (setq tramp-auto-save-directory "~/.saves")

  ;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
  ;; (custom-set-variables
  ;;  ‘(auto-save-file-name-transforms ‘((“.*” “~/.saves/\\1″ t)))
  ;;   ‘(backup-directory-alist ‘((“.*” . “~/.saves/”))))
#+end_src

* Disable popup boxes
  :PROPERTIES:
  :all-set:  true
  :END:

#+begin_src emacs-lisp
  (defadvice yes-or-no-p (around prevent-dialog activate)
    "Prevent yes-or-no-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it))
  (defadvice y-or-n-p (around prevent-dialog-yorn activate)
    "Prevent y-or-n-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it))
#+end_src

* Ido
  :PROPERTIES:
  :all-set:  true
  :END:

Some handy tips for [[https://www.masteringemacs.org/article/introduction-to-ido-mode]["Interactively DO things."]]

#+begin_src emacs-lisp
  (use-package ido
    :init
    (progn
      (ido-mode t)
      (setq ido-enable-flex-matching t)
      (setq ido-everywhere t)))
#+end_src

* Parens/whitespace/indentation
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (use-package mic-paren
    :config
    (paren-activate)
    )

  (use-package whitespace
    :init
    (setq global-whitespace-mode nil)
    :config
    (setq whitespace-display-mappings
          '((space-mark   ?\ [?\u00B7] [?.])
            (space-mark   ?\xA0 [?\u00A4] [?_])
            (newline-mark ?\n [?\u21B5 ?\n]
                          [172 10] [?\u00AF ?\n]) ;; downwards arrow, ..., overscore
            (tab-mark     ?\t [9655 9])))
    (setq whitespace-style
          '(face
            trailing
            tabs
            ;; tab-mark
            ;; spaces
            ;; space-mark
            ;; lines-tail
            ;; newline
            ;; newline-mark
            ;; empty
            indentation::tab
            indentation::space
            indentation
            space-after-tab::tab
            space-after-tab::space
            space-after-tab
            space-before-tab::tab
            space-before-tab::space
            space-before-tab))
    )

  (use-package dtrt-indent
    :config
    (progn
      (dtrt-indent-mode 1))
    )
#+end_src

* Keybindings
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  ;; To reduce errors. Was: 'buffer-menu
  (global-set-key (kbd "C-x C-b") 'switch-to-buffer)
  ;; Was: 'ido-switch-buffer
  (global-set-key (kbd "C-x b") 'list-buffers)
  (global-set-key (kbd "C-c b") 'switch-to-previous-buffer)

  ;; (global-set-key (kbd "C-'") 'comment-or-uncomment-region)
  ;; (global-set-key (kbd "C-?") 'comment-region)
  ;; (global-set-key (kbd "C-/") 'uncomment-region)

  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  (global-set-key (kbd "C-x C-h") 'replace-string)
#+end_src

* Theming and window shaping
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'wombat2 t)

  (when window-system
    (if (eq system-type 'gnu/linux)
        (and (set-face-attribute 'default nil :font "DejaVu Sans Mono-11")
             (set-frame-font "DejaVu Sans Mono-11")))
    (if (eq system-type 'darwin)
        (and (set-face-attribute 'default nil :font "Panic Sans-11")
             (set-frame-font "Panic Sans-11"))))
  ;; How can I set fallback fonts if these aren't installed?
  ;; Or just try from a list?

  ;; If we're windowed, set the transparency
  ;; Usage: (set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
  ;; (set-frame-parameter (selected-frame) 'alpha '(100 100))
  ;; (add-to-list 'default-frame-alist '(alpha 100 100))

  ;; If we're windowed, set the frame size.
  (when (display-graphic-p)
    ;; 11-inch MacBook Air
    (if (eq system-type 'darwin)
        (set-frame-size (selected-frame) 191 55)))

  (setq-default indicate-empty-lines t)
  (when (not indicate-empty-lines)
    (toggle-indicate-empty-lines))
#+end_src

* Spelling
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (setq flyspell-issue-welcome-flag nil)
  (setq flyspell-mode-line-string " FlyS")

  ;; These are the modes flyspell should be enabled for.
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook
                  log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))

  (dolist (mode '(emacs-lisp-mode-hook
                  inferior-lisp-mode-hook
                  python-mode-hook))
    (add-hook mode
              '(lambda ()
                 (flyspell-prog-mode))))

  (global-set-key (kbd "<f8>") 'ispell-word) ;; built-in binding is M-$, ew
  (global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
  (global-set-key (kbd "C-M-<f8>") 'flyspell-buffer)
  (global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word)
    )
  (global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)

  ;; use hunspell when possible
  ;; (when (executable-find "hunspell")
  ;;   (setq-default ispell-program-name "hunspell")
  ;;   (setq ispell-really-hunspell t))
#+end_src

* Flycheck
  :PROPERTIES:
  :all-set:  false
  :END:

** General

#+begin_src emacs-lisp
  (use-package flycheck)
  ;; Don't start Flycheck willy-nilly all over the place...
  (setq-default global-flycheck-mode nil)
  ;; (add-hook 'after-init-hook #'global-flycheck-mode)

  (setq flycheck-check-syntax-automatically
        '(mode-enabled
          new-line
          save
          idle-change))

  (setq flycheck-idle-change-delay 0.3)

#+end_src

** checkbashisms

For this to work, =checkbashisms= needs to be available on the =$PATH=:

#+begin_src sh
  yaourt -S checkbashisms # Arch Linux, from AUR
  brew install checkbashisms # Mac OS X, from Homebrew
  sudo apt-get install devscripts # Debian/Ubuntu, official
  sudo yum install rpmdevtools # Red Hat/CentOS
  sudo pkg install checkbashisms # FreeBSD
#+end_src

#+begin_src emacs-lisp
  (use-package flycheck-checkbashisms
    :config
    (progn
      (flycheck-checkbashisms-setup)
      (setq
       ;; Check 'echo -n' usage
       flycheck-checkbashisms-newline t
       flycheck-checkbashisms-posix t)))
#+end_src

* Pandoc
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (use-package pandoc-mode)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)

  (add-hook 'markdown-mode-hook 'pandoc-mode)
  (add-hook 'latex-mode-hook 'pandoc-mode)
  (add-hook 'LaTeX-mode-hook 'pandoc-mode)
#+end_src

* Org
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook 'pandoc-mode)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (sh . t)
   (C . t)
   ;; How to handle C++?
   ;; (C++ . t)
   (latex . t)
   (python . t)))

;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (add-hook 'after-save-hook 'org-export-dispatch)))

;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (local-set-key (kbd "M-I") 'org-toggle-iimage-in-org)))

(setq org-src-tab-acts-natively t
      org-babel-python-command "ipython"
      org-export-backends (quote (ascii html icalendar latex md))
      org-export-dispatch-use-expert-ui t
      org-export-with-smart-quotes t
      org-edit-src-content-indentation 0
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      ;; http://stackoverflow.com/questions/17239273/org-mode-buffer-latex-syntax-highlighting
      org-highlight-latex-and-relatex '(latex script entities)
      )

;; Taken from https://github.com/xiaohanyu/oh-my-emacs/blob/master/core/ome-org.org
;; (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\n\r")
;; (custom-set-variables `(org-emphasis-alist ',org-emphasis-alist))
;; (org-element--set-regexps)

;; code snippet comes from
;; http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html
;; Include the latex-exporter
;; check whether org-mode 8.x is available
(when (require 'ox-latex nil 'noerror)
  ;; You need to install pygments to use minted
  (when (executable-find "pygmentize")
    ;; Add minted to the defaults packages to include when exporting.
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    ;; Tell the latex export to use the minted package for source
    ;; code coloration.
    (setq org-latex-listings 'minted)
    ;; Let the exporter use the -shell-escape option to let latex
    ;; execute external programs.
    ;; This obviously and can be dangerous to activate!
    (setq org-latex-minted-options
          '(("mathescape" "true")
            ("linenos" "true")
            ("numbersep" "5pt")
            ("frame" "lines")
            ("framesep" "2mm")))
    (setq org-latex-pdf-process
          '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))))
#+end_src

* CSS
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (use-package rainbow-mode)
  (defun my-css-mode-hook ()
    (rainbow-mode t))
  (add-hook 'css-mode-hook 'my-css-mode-hook)

  (define-globalized-minor-mode my-global-rainbow-mode rainbow-mode
    (lambda () (rainbow-mode 1)))

  ;; (my-global-rainbow-mode 1)
#+end_src

* C/C++
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (setq auto-mode-alist
       (append '(("\\.C$" . c++-mode)
                 ("\\.cc$" . c++-mode)
                 ("\\.cpp$" . c++-mode)
                 ("\\.c$" . c-mode)
                 ("\\.h$" . c++-mode)
                 ("\\.hh$" . c++-mode)
                 ("\\.hpp$" . c++-mode)
                 ) auto-mode-alist))
#+end_src

** ISPC

Taken from an [[https://github.com/ispc/ispc/issues/1105][ISPC GitHub issue]].

#+begin_src emacs-lisp
  (defun add-ispc-keywords()
    "adds uniform and varying keywords for c and c++ modes"
                                          ;
    (font-lock-add-keywords nil
                            '(
                              ("\\<\\(uniform\\)" . 'font-lock-keyword-face)
                              ("\\<\\(varying\\)" . 'font-lock-keyword-face)
                                          ; more go here
                              )
                            )
    )

  (add-hook 'c++-mode-hook 'add-ispc-keywords)
  (add-to-list 'auto-mode-alist '("\\.ispc$" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.isph$" . c++-mode))

#+end_src

* Makefiles
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (setq auto-mode-alist
        (append '(("Makefile*\\'" . makefile-mode)
                  ("makefile*\\'" . makefile-mode)
                  ) auto-mode-alist))

  (add-hook 'makefile-mode-hook 'whitespace-mode)
#+end_src

* FORTRAN
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  ;; These might already be defaults, but it doesn't hurt.
  (setq auto-mode-alist
        (append '(("\\.f\\'"   . fortran-mode)
                  ("\\.F\\'"   . fortran-mode)
                  ("\\.for\\'" . fortran-mode)
                  ("\\.f90\\'" . f90-mode)
                  ("\\.F90\\'" . f90-mode)
                  ("\\.f95\\'" . f90-mode)
                  ("\\.f03\\'" . f90-mode)
                  ("\\.f08\\'" . f90-mode)
                  ) auto-mode-alist))
#+end_src

* PKGBUILDs
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (use-package pkgbuild-mode
    :mode
    (("/PKGBUILD/" . pkgbuild-mode))
    )

#+end_src

* systemd
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.netdev\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.network\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.link\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
#+end_src

* LaTeX
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  ;; (use-package auctex-latexmk) 
  ;; (auctex-latexmk-setup)

  ;; grrrrrr what's with the capitalization
  (add-hook 'latex-mode-hook 'flycheck-mode)
  (add-hook 'latex-mode-hook 'whitespace-mode)
  (add-hook 'LaTeX-mode-hook 'flycheck-mode)
  (add-hook 'LaTeX-mode-hook 'whitespace-mode)
#+end_src

* Shell
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (add-hook 'sh-mode-hook 'flycheck-mode)
#+end_src

* Python
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (use-package python
    :interpreter ("ipython" . python-mode)
    )

  (add-hook 'python-mode-hook 'flycheck-mode)
  (add-hook 'python-mode-hook 'whitespace-mode)

  ;; Use pyflakes instead of flake8 or pylint for syntax checking.
  (use-package flycheck-pyflakes)
  ;; Don't disable these, in case pyflakes isn't available.
  ;; (add-to-list 'flycheck-disabled-checkers 'python-flake8)
  ;; (add-to-list 'flycheck-disabled-checkers 'python-pylint)
  ;; (add-to-list 'flycheck-disabled-checkers 'python-pycompile)

  (setq flycheck-pylintrc "~/.pylintrc")
#+end_src

* Markdown
  :PROPERTIES:
  :all-set:  true
  :END:

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode
    (("\\.text\\'" . markdown-mode)
     ("\\.txt\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode)
     ("\\.mdown\\'" . markdown-mode)
     ("\\.md\\'" . gfm-mode))
    :config
    (add-hook 'markdown-mode-hook
              (lambda ()
                (add-hook 'after-save-hook 'markdown-export t :local)))
    )

#+end_src

* deft

Taken conveniently from [[http://jblevins.org/projects/deft/][Jason Blevins' website]].

#+begin_src emacs-lisp
  (use-package deft
    :config
    (progn
      (setq
       ;; "${HOME}/Dropbox/Notes" doesn't work, why is that?
       deft-directory "~/Dropbox/Notes"
       deft-extensions '("txt" "text" "utf8" "taskpaper" "md" "markdown" "org" "tex")
       deft-time-format " %Y-%m-%d %H:%M:%S"
       deft-recursive t
       deft-use-filename-as-title t)
      (global-set-key [f9] 'deft))
    )
#+end_src

* CMAKE
  :PROPERTIES:
  :all-set:  true
  :END:

  This sections needs to come after the Markdown section so that CMake
  files get recognized properly.

#+begin_src emacs-lisp
  (use-package cmake-mode
    :mode
    (("CMakeLists\\.txt\\'" . cmake-mode)
     ("CMakeCache\\.txt\\'" . cmake-mode)
     ("\\.cmake\\'" . cmake-mode))
    )
#+end_src

* docview
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  (use-package doc-view
    :config
    ;; paging up and down globally
    ;; (fset 'doc-prev "\C-xo\C-x[\C-xo")
    ;; (fset 'doc-next "\C-xo\C-x]\C-xo")
    ;; (global-set-key (kbd "M-[") 'doc-prev)
    ;; (global-set-key (kbd "M-]") 'doc-next)
    (define-key doc-view-mode-map (kbd "M-[") 'doc-view-previous-page)
    (define-key doc-view-mode-map (kbd "M-]") 'doc-view-next-page)
    ;; always refresh when the contents change
    (add-hook 'doc-view-mode-hook 'auto-revert-mode)
    )
#+end_src

* scratch buffers
  :PROPERTIES:
  :all-set:  true
  :END:

#+begin_src emacs-lisp
  (use-package scratch)
#+end_src

* yasnippet
  :PROPERTIES:
  :all-set:  false
  :END:

#+begin_src emacs-lisp
  ;; (use-package yasnippet
  ;;   :config
  ;;   (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
  ;;   ;; (add-to-list 'auto-mode-alist '("\\.snippet\\'" . snippet-mode))
  ;;   (yas-global-mode 1)
  ;;   )
#+end_src

* View large files (vlf)

Setting ensure to nil is necessary, because the name of the package and how we load it are different.

#+BEGIN_SRC emacs-lisp
  ;; (use-package vlf-setup
  ;;   :ensure nil)
#+END_SRC

* Tabbar

#+begin_src emacs-lisp
  ;; (use-package tabbar
  ;;   :config
  ;;   (tabbar-mode 1)
  ;;   )
#+end_src

* git-gutter

#+begin_src emacs-lisp
  ;; (use-package git-gutter
  ;;   :config
  ;;   (progn
  ;;     (global-git-gutter-mode 1)
  ;;     (git-gutter:linum-setup)))
#+end_src

* Macros
  :PROPERTIES:
  :all-set:  true
  :END:

#+begin_src emacs-lisp
  (fset 'manip-xyz-line-from-pdf
        (lambda
          (&optional arg)
          "Keyboard macro."
          (interactive "p")
          (kmacro-exec-ring-item
           (quote
            ("   " 0 "%d")) arg)))
#+end_src

