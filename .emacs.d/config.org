* General configuration

#+begin_src emacs-lisp
(setq user-full-name "Eric J. Berquist"
      user-mail-address "eric.berquist@gmail.com")

(add-to-list 'load-path "~/.emacs.d/lisp/")

;; took some tricks from http://www.aaronbedra.com/emacs.d/

;; What's the difference between setq and setq-default? Seems usage
;; here is rather inconsistent. TODO
;; See here: http://stackoverflow.com/questions/18172728/the-difference-between-setq-and-setq-default-in-emacs-lisp

;; http://stackoverflow.com/questions/3281581/how-to-word-wrap-in-emacs
;; http://stackoverflow.com/questions/12989072/showing-continuation-lines-in-emacs-in-a-text-terminal
(setq-default transient-mark-mode t
              visual-line-mode t
              truncate-lines nil
              line-number-mode t
              column-number-mode t
              cursor-type 'box)

;; Enable maximum syntax highlighting wherever possible.
(setq global-font-lock-mode t
      font-lock-maximum-decoration t)

;; Bells are annoying, stop ringing!
(setq-default visible-bell nil
              audible-bell nil
              ring-bell-function 'ignore)

;; 'y' is two characters less than 'yes'.
;; 'defalias' or 'fset'?
(defalias 'yes-or-no-p 'y-or-n-p)

;; death to tabs, tabs are evil
(setq-default indent-tabs-mode nil
              tab-width 4)

;; Line length when executing `fill-paragraph`. Default is 70. See
;; https://www.emacswiki.org/emacs/FillParagraph and
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Commands.html.
;; (setq-default fill-column 80)
;; (setq-default sentence-end-double-space nil)

;; Automatically reload buffers when their files change, and make sure
;; to check on the version control status every now and then.
(global-auto-revert-mode t)
;; TODO Turns out this is *extremely* irritating and moves the mark
;; every time the buffer refreshes!
;; (setq-default auto-revert-check-vc-info t)

;; Set up the initial scratch buffer.
;; http://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/
(setq initial-major-mode 'fundamental-mode
      initial-scratch-message nil)

;; What platform are we on? darwin, gnu/linux are the most likely
;; answers.
(defvar system-type-as-string (prin1-to-string system-type))
(defun sys () system-type-as-string)

;; Set the path properly on OS X.
(use-package exec-path-from-shell)
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+end_src

* Backups/autosaving

#+begin_src emacs-lisp
;; let's live on the edge and disable backup and autosave
(setq backup-inhibited t
      auto-save-default nil
      create-lockfiles nil
      make-backup-files nil
      )
#+end_src

* Disable popup boxes

#+begin_src emacs-lisp
(defadvice yes-or-no-p (around prevent-dialog activate)
  "Prevent yes-or-no-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice y-or-n-p (around prevent-dialog-yorn activate)
  "Prevent y-or-n-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
#+end_src

* Ido and searching

Some handy tips for [[https://www.masteringemacs.org/article/introduction-to-ido-mode]["Interactively DO things."]]

http://oremacs.com/2015/02/09/ido-vertical/

#+begin_src emacs-lisp
(use-package ido
  :config
  (setq ido-enable-flex-matching t
        ido-everywhere t
        ;; wow, that *is* annoying!
        ido-use-filename-at-point nil
        ido-use-url-at-point nil)
  :init
  (ido-mode t)
  )
(use-package ido-vertical-mode
  :disabled t
  :config
  (setq ido-vertical-show-count t)
  :init
  (ido-vertical-mode 1)
  )
#+end_src

#+BEGIN_SRC emacs-lisp
(add-to-list 'completion-ignored-extensions ".html")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :disabled t
  :config
  (setq
   ivy-use-virtual-buffers t
   ivy-count-format "(%d/%d) "
   ivy-re-builders-alist '((t . ivy--regex-fuzzy))
   )
  :init
  (ivy-mode 1)
  )
(use-package counsel
  :disabled t
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  )
(use-package swiper
  :disabled t
  :config
  (global-set-key (kbd "C-s") 'swiper)
  )
#+END_SRC

Source for anzu can be found [[https://github.com/syohex/emacs-anzu][here]].

#+BEGIN_SRC emacs-lisp
(use-package anzu
  ;; Unncessary since anzu comes with a variable!
  ;; :diminish ""
  :config
  (setq
   anzu-mode-lighter ""
   )
  ;; M-% and C-M-% are the original query-replace(-regexp) shortcuts
  (global-set-key (kbd "C-x C-g") 'anzu-query-replace)
  (global-set-key (kbd "C-x C-a") 'anzu-query-replace-regexp)
  :init
  (global-anzu-mode 1)
  )
#+END_SRC

Some of my computers have [[https://github.com/BurntSushi/ripgrep][ripgrep]] installed. Use =M-x ripgrep-regexp= to activate.

#+BEGIN_SRC emacs-lisp
(use-package ripgrep)
#+END_SRC

* Parens/whitespace/indentation

See https://www.lunaryorn.com/posts/my-emacs-configuration-with-use-package.

#+begin_src emacs-lisp
(use-package mic-paren
  :config
  (setq
   paren-delay nil
   paren-highlight-at-point t
   paren-highlight-offscreen t
   )
  :init
  (paren-activate)
  )

(use-package whitespace
  :bind (("C-c t" . whitespace-mode))
  :config
  (setq
   ;; use the fill-column value
   whitespace-line-column nil
   whitespace-display-mappings
   '((space-mark   ?\ [?\u00B7] [?.])
     (space-mark   ?\xA0 [?\u00A4] [?_])
     (newline-mark ?\n [?\u21B5 ?\n]
                   [172 10] [?\u00AF ?\n]) ;; downwards arrow, ..., overscore
     (tab-mark     ?\t [9655 9]))
   whitespace-style
   '(face
     trailing
     ;; tabs
     ;; spaces
     ;; lines
     ;; lines-tail
     ;; newline
     ;; empty
     ;; indentation::tab
     ;; indentation::space
     ;; indentation
     ;; big-indent
     ;; space-after-tab::tab
     ;; space-after-tab::space
     ;; space-after-tab
     ;; space-before-tab::tab
     ;; space-before-tab::space
     ;; space-before-tab
     ;; space-mark
     ;; tab-mark
     ;; newline-mark
     ))
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (add-hook 'text-mode-hook 'whitespace-mode)
  :init
  (setq global-whitespace-mode nil)
  )

(use-package dtrt-indent
  :init
  (dtrt-indent-mode 1)
  )

(use-package unfill
  :bind (("C-M-q" . unfill-paragraph)))

;; Always place a newline at the end of files, like nano does by
;; default.
(setq require-final-newline t)
#+end_src

* Keybindings

Used to have stuff for ='comment-or-uncomment-region=, ='comment-region=, and ='uncomment-region= here, but =M-;= calls ='comment-dwim=, which is what you really want.

#+begin_src emacs-lisp
;; To reduce errors. Was: 'buffer-menu
(global-set-key (kbd "C-x C-b") 'switch-to-buffer)
;; Was: 'ido-switch-buffer
(global-set-key (kbd "C-x b") 'ibuffer)
(global-set-key (kbd "C-c b") 'switch-to-previous-buffer)

(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

(global-set-key (kbd "C-x C-h") 'replace-string)
#+end_src

* Theming and window shaping

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'wombat2 t)

;; Other themes I like to have installed: monochrome-theme plan9-theme
;; abyss-theme lush-theme punpun-theme (punpun-light, punpun-dark)
;; gotham-theme rebecca-theme quasi-monochrome-theme

(when window-system
  (if (eq system-type 'gnu/linux)
      (and (set-face-attribute 'default nil :font "DejaVu Sans Mono-11")
           (set-frame-font "DejaVu Sans Mono-11")))
  (if (eq system-type 'darwin)
      (and (set-face-attribute 'default nil :font "Panic Sans-11")
           (set-frame-font "Panic Sans-11"))))
;; How can I set fallback fonts if these aren't installed?
;; Or just try from a list?

;; If we're windowed, set the transparency
;; Usage: (set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
;; (set-frame-parameter (selected-frame) 'alpha '(100 100))
;; (add-to-list 'default-frame-alist '(alpha 100 100))

;; If we're windowed, set the frame size.
(when (display-graphic-p)
  ;; 11-inch MacBook Air
  (if (eq system-type 'darwin)
      (set-frame-size (selected-frame) 191 55)))

(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))
#+end_src

** line numbers

Taken from https://www.emacswiki.org/emacs/LineNumbers:

#+BEGIN_QUOTE
Here’s a better approach. Every buffer has it’s own format variable and the separator use the mode-line face.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package linum
  :disabled t)

(unless window-system
  (add-hook 'linum-before-numbering-hook
            (lambda ()
              (setq-local linum-format-fmt
                          (let ((w (length (number-to-string
                                            (count-lines (point-min) (point-max))))))
                            (concat "%" (number-to-string w) "d"))))))

(defun linum-format-func (line)
  (concat
   (propertize (format linum-format-fmt line) 'face 'linum)
   (propertize " " 'face 'mode-line)))

(unless window-system
  (setq linum-format 'linum-format-func))

(use-package hlinum
  :disabled t
  :config
  (setq linum-highlight-in-all-buffersp t)
  :init
  (hlinum-activate)
  )
#+END_SRC

* Spelling

=C-;= to try and correct a misspelled word on a line.

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :config
  (setq langtool-mother-tongue "en"
        langtool-default-language "en-US")
  (if (eq system-type 'darwin)
      (setq langtool-language-tool-server-jar "/usr/local/Cellar/languagetool/4.1/libexec/languagetool-server.jar"))
  (if (eq system-type 'darwin)
      (setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.1/libexec/languagetool-commandline.jar"))
  )
#+END_SRC

TODO clean this up, figure out LaTeX

#+begin_src emacs-lisp
(setq flyspell-issue-welcome-flag nil)
(setq flyspell-mode-line-string " FlyS")

;; These are the modes flyspell should be enabled for.
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook
                log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))

;; Don't enable flyspell for programming-type modes.
;; (dolist (mode '(emacs-lisp-mode-hook
;;                 inferior-lisp-mode-hook
;;                 python-mode-hook))
;;   (add-hook mode
;;             '(lambda ()
;;                (flyspell-prog-mode))))

(global-set-key (kbd "<f8>") 'ispell-word) ;; built-in binding is M-$, ew
(global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
(global-set-key (kbd "C-M-<f8>") 'flyspell-buffer)
(global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
(defun flyspell-check-next-highlighted-word ()
  "Custom function to spell check next highlighted word"
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word)
  )
(global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)
#+end_src

** word count

#+BEGIN_SRC emacs-lisp
(use-package wc-mode
  :bind (("C-c w" . wc-mode))
  )
#+END_SRC

* Flycheck

** General

TODO add LaTex

#+begin_src emacs-lisp
(use-package flycheck
  :bind (("C-c f" . flycheck-mode))
  :config
  (setq
   flycheck-check-syntax-automatically '(mode-enabled save)
   flycheck-pylintrc "~/.pylintrc"))
#+end_src

** checkbashisms

For this to work, =checkbashisms= needs to be available on the =$PATH=:

#+begin_src sh
yaourt -S checkbashisms # Arch Linux, from AUR
brew install checkbashisms # Mac OS X, from Homebrew
sudo apt-get install devscripts # Debian/Ubuntu, official
sudo yum install rpmdevtools # Red Hat/CentOS
sudo pkg install checkbashisms # FreeBSD
#+end_src

#+begin_src emacs-lisp
(use-package flycheck-checkbashisms
  :init
  (setq
   ;; Check 'echo -n' usage
   flycheck-checkbashisms-newline t
   flycheck-checkbashisms-posix t
   )
  (flycheck-checkbashisms-setup))
#+end_src

* Git/version control

** General

#+BEGIN_SRC emacs-lisp
;; Even though VC systems (at least git) commit the symbolic link
;; pointer itself, and not the file it's pointing to, I want to edit
;; the file.
(setq vc-follow-symlinks t)
#+END_SRC

** Git

- [[https://magit.vc/manual/magit/Getting-started.html][magit: Getting Started]]

#+BEGIN_SRC emacs-lisp
(use-package git-commit
  :init
  (global-git-commit-mode)
  )
(use-package gitconfig-mode)
(use-package gitignore-mode)
(use-package magit
  ;; "Getting started" uses C-x g, which is also undefined.
  :bind (("C-c m" . magit-status))
  )
(use-package magit-svn
  :config
  (add-hook 'magit-mode-hook 'magit-svn-mode)
  )
#+END_SRC

Not using =git-gutter= right now, but if I did...

#+BEGIN_SRC emacs-lisp
(setq git-gutter:handled-backends (quote (git svn hg bzr)))
(setq git-gutter:hide-gutter t)
#+END_SRC

* Pandoc

#+begin_src emacs-lisp
(use-package pandoc-mode
  :config
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
  )
#+end_src

* Org

#+begin_src emacs-lisp
;; http://orgmode.org/manual/Code-evaluation-security.html
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "latex")))

(use-package org
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c b" . org-iswitchb))
  :config
  (setq org-directory "~/Dropbox/Notes"
        org-agenda-files '("~/Dropbox/Notes"
                           "~/Dropbox/research/lab_notebook")
        org-log-done 'time
        org-log-done-with-time t
        org-closed-keep-when-no-todo t
        ;; http://superuser.com/questions/299886/linewrap-in-org-mode-of-emacs
        org-startup-truncated nil
        org-export-backends (quote (ascii html icalendar latex md))
        org-export-dispatch-use-expert-ui t
        org-export-with-smart-quotes t
        org-image-actual-width nil
        org-edit-src-content-indentation 0
        org-list-allow-alphabetical t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-latex-create-formula-image-program 'imagemagick
        ;; http://stackoverflow.com/questions/17239273/org-mode-buffer-latex-syntax-highlighting
        org-highlight-latex-and-relatex '(latex script entities)
        org-html-with-latex (quote mathjax)
        org-latex-inline-image-rules '(("file" . "\\.\\(pdf\\|jpeg\\|jpg\\|png\\|ps\\|eps\\|tikz\\|pgf\\|svg\\|gif\\)\\'"))
        org-confirm-babel-evaluate nil
        org-latex-hyperref-template "\\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},\n pdfsubject={%d},\n pdfcreator={%c}, \n pdflang={%L}, \n colorlinks=true, \n linkcolor=MidnightBlue, \n citecolor=MidnightBlue, \n urlcolor=MidnightBlue}\n"
        )
  (add-to-list 'org-latex-packages-alist '("" "braket" t))
  (add-to-list 'org-latex-packages-alist '("usenames,dvipsnames,svgnames,table" "xcolor" nil))
  (setq org-latex-pdf-process
        '("latexmk -xelatex -shell-escape -interaction=batchmode -output-directory=%o %f"))
  ;; http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html
  ;; You need to install pygments to use minted.
  (when (executable-find "pygmentize")
    ;; Add minted to the defaults packages to include when exporting.
    (add-to-list 'org-latex-packages-alist '("" "minted" nil))
    ;; Tell the latex export to use the minted package for source code
    ;; coloration.
    (setq org-latex-listings 'minted)
    ;; Let the exporter use the -shell-escape option to let latex
    ;; execute external programs.  This obviously and can be
    ;; dangerous to activate!
    (setq org-latex-minted-options
          '(("mathescape" "true")
            ("linenos" "true")
            ("numbersep" "5pt")
            ("frame" "lines")
            ("framesep" "2mm"))))
  )
(use-package htmlize)
(use-package ox-gfm)
(use-package ox-pandoc)
#+end_src

From https://emacs.stackexchange.com/questions/20577/org-babel-load-all-languages-on-demand.

#+BEGIN_SRC emacs-lisp
(defadvice org-babel-execute-src-block (around load-language nil activate)
  "Load language if needed"
  (let ((language (org-element-property :language (org-element-at-point))))
    (unless (cdr (assoc (intern language) org-babel-load-languages))
      (add-to-list 'org-babel-load-languages (cons (intern language) t))
      (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
    ad-do-it))
#+END_SRC

Additional things of interest might be found in https://github.com/xiaohanyu/oh-my-emacs/blob/master/core/ome-org.org.

Every time an Org buffer is saved, automatically export it to HTML. Taken from https://www.reddit.com/r/emacs/comments/4golh1/how_to_auto_export_html_when_saving_in_orgmode/.

#+BEGIN_SRC emacs-lisp
(defun org-mode-export-hook ()
  (add-hook 'after-save-hook 'org-html-export-to-html t t))
(add-hook 'org-mode-hook #'org-mode-export-hook)
#+END_SRC

A function to toggle this auto-HTML-export behavior. Does this play nice with the function above?

#+BEGIN_SRC emacs-lisp
(defun toggle-org-html-export-on-save ()
  (interactive)
  (if (memq 'org-html-export-to-html after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-html-export-to-html t)
        (message "Disabled org html export on save for current buffer..."))
    (add-hook 'after-save-hook 'org-html-export-to-html nil t)
    (message "Enabled org html export on save for current buffer...")))
#+END_SRC

** org-ref

#+BEGIN_SRC emacs-lisp
(use-package org-ref)
(setq reftex-default-bibliography '("~/Dropbox/_bibliography/references.bib"))

(setq org-ref-bibliography-notes "~/Dropbox/_bibliography/notes.org"
      org-ref-default-bibliography '("~/Dropbox/_bibliography/references.bib")
      org-ref-pdf-directory "~/Dropbox/_bibliography/bibtex-pdfs"
      bibtex-dialect 'biblatex)
#+END_SRC

* CSS

#+begin_src emacs-lisp
(use-package rainbow-mode
  :disabled t)
;; (defun my-css-mode-hook ()
;;   (rainbow-mode t))
;; (add-hook 'css-mode-hook 'my-css-mode-hook)

;; (define-globalized-minor-mode my-global-rainbow-mode rainbow-mode
;;   (lambda () (rainbow-mode 1)))

;; (my-global-rainbow-mode 1)
(setq my-global-rainbow-mode nil)
#+end_src

* Compilation

Taken from https://emacs.stackexchange.com/questions/62/hide-compilation-window#110.

#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-finish-functions
          (lambda (buf strg)
            ;; https://stackoverflow.com/a/16245593/3249688
            (when (not (derived-mode-p 'ripgrep-search-mode))
              (let ((win (get-buffer-window buf 'visible)))
                (when win (delete-window win))))))
#+END_SRC

* C/C++

#+begin_src emacs-lisp
(setq auto-mode-alist
     (append '(("\\.C$" . c++-mode)
               ("\\.cc$" . c++-mode)
               ("\\.cpp$" . c++-mode)
               ("\\.c$" . c-mode)
               ("\\.h$" . c++-mode)
               ("\\.hh$" . c++-mode)
               ("\\.hpp$" . c++-mode)
               ) auto-mode-alist))
#+end_src

These are valid for all C-style modes (I think).

#+BEGIN_SRC emacs-lisp
(setq c-basic-offset 4)
(setq c-default-style
      (quote
       ((java-mode . "java")
        (awk-mode . "awk")
        (other . "k&r"))))
(setq c-doc-comment-style
      (quote
       ((c-mode . javadoc)
        (java-mode . javadoc)
        (pike-mode . autodoc))))
#+END_SRC

This only makes sense for c++-mode.

https://stackoverflow.com/questions/2619853/emacs-override-indentation

#+BEGIN_SRC emacs-lisp
(defun my-c++-setup ()
  (c-set-offset 'innamespace [0]))
(add-hook 'c++-mode-hook 'my-c++-setup)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :bind (("C-M-<tab>" . clang-format-region))
  )
#+END_SRC

TODO What's the difference between =c++-mode= and =cc-mode=?

** ISPC

Taken from an [[https://github.com/ispc/ispc/issues/1105][ISPC GitHub issue]].

#+begin_src emacs-lisp
(defun add-ispc-keywords()
  "adds uniform and varying keywords for c and c++ modes"
  (font-lock-add-keywords nil
                          '(
                            ("\\<\\(uniform\\)" . 'font-lock-keyword-face)
                            ("\\<\\(varying\\)" . 'font-lock-keyword-face)
                            ("\\<\\(export\\)" . 'font-lock-keyword-face)
                            )
                          )
  )

(add-hook 'c++-mode-hook 'add-ispc-keywords)
(add-to-list 'auto-mode-alist '("\\.ispc$" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.isph$" . c++-mode))

#+end_src

* Makefiles

#+begin_src emacs-lisp
(setq auto-mode-alist
      (append '(("Makefile*\\'" . makefile-mode)
                ("makefile*\\'" . makefile-mode)
                ) auto-mode-alist))
#+end_src

* FORTRAN

#+begin_src emacs-lisp
;; These might already be defaults, but it doesn't hurt.
(setq auto-mode-alist
      (append '(("\\.f\\'"   . fortran-mode)
                ("\\.F\\'"   . fortran-mode)
                ("\\.for\\'" . fortran-mode)
                ("\\.f90\\'" . f90-mode)
                ("\\.F90\\'" . f90-mode)
                ("\\.f95\\'" . f90-mode)
                ("\\.f03\\'" . f90-mode)
                ("\\.f08\\'" . f90-mode)
                ) auto-mode-alist))

(setq fortran-comment-region "C")
#+end_src

* PKGBUILDs

#+begin_src emacs-lisp
(use-package pkgbuild-mode
  :mode
  (("/PKGBUILD/" . pkgbuild-mode))
  )
#+end_src

* systemd

#+begin_src emacs-lisp
(use-package systemd)
#+end_src

* LaTeX

#+begin_src emacs-lisp
(use-package auctex)
(use-package auctex-latexmk)
(auctex-latexmk-setup)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
;; (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
;; (setq font-latex-math-environments
;;       (append '("dmath")
;;               font-latex-math-environments))
#+end_src

* Python

#+begin_src emacs-lisp
;; The package is "python" but the mode is "python-mode":
(use-package python
  :mode (("\\.ipy\\'" . python-mode))
  :interpreter ("ipython" . python-mode)
  )

;; Use pyflakes instead of flake8 or pylint for syntax checking.
;; I think stuffing the setq under config activates this for Python.
(use-package flycheck-pyflakes
  :config
  ;; Don't disable these, in case pyflakes isn't available.
  ;; (add-to-list 'flycheck-disabled-checkers 'python-flake8)
  ;; (add-to-list 'flycheck-disabled-checkers 'python-pylint)
  ;; (add-to-list 'flycheck-disabled-checkers 'python-pycompile)
  )
;; Enable the use of both pyflakes and pylint.
;; https://github.com/flycheck/flycheck/issues/186
;; (flycheck-add-next-checker 'python-pyflakes 'python-pylint)
#+end_src

** Cython

#+BEGIN_SRC emacs-lisp
(use-package cython-mode)
(use-package flycheck-cython)
#+END_SRC

* Mediawiki

#+BEGIN_SRC emacs-lisp
(use-package mediawiki)
#+END_SRC

* Markdown

Rather than use =--mathjax== with a URL argument, =--include-in-header= allows the insertion of arbitrary HTML into Pandoc's output. The =mathjax.html= file contains Chemistry Stack Exchange's header scripts for first configuring the MathJax extension to load =mhchem=, then loads MathJax.

See https://stackoverflow.com/questions/25410701/how-do-i-include-meta-tags-in-pandoc-generated-html for an example of how including arbitrary HTML works.

See https://chemistry.meta.stackexchange.com/questions/3540/what-additional-formatting-features-are-available-to-mathjax-possibly-via-requ for more information about what can be done with the MathJax extension.

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode
  (
   ("\\.markdown\\'" . markdown-mode)
   ("\\.mdown\\'" . markdown-mode)
   ("\\.md\\'" . markdown-mode)
   )
  :config
  (add-hook 'markdown-mode-hook 'pandoc-mode)
  (add-hook 'markdown-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'pandoc-run-pandoc t :local)))
  :init
  (setq
   markdown-content-type "application/xhtml+xml"
   markdown-coding-system "utf-8"
   ;; This isn't super necessary since I have pandoc run a similar
   ;; command every time I save with these default arguments, but this
   ;; always produces HTML where pandoc-mode might not.
   markdown-command "pandoc --from=markdown --to=html5 --highlight-style=pygments --standalone --include-in-header=${HOME}/.emacs.d/mathjax.html"
   markdown-enable-math t
   markdown-fontify-code-blocks-natively t
   markdown-hide-markup nil
   markdown-hide-urls nil
   markdown-link-space-sub-char "-"
   )
  )
#+end_src

* deft

Taken conveniently from [[http://jblevins.org/projects/deft/][Jason Blevins' website]] and http://pragmaticemacs.com/emacs/make-quick-notes-with-deft/.

#+begin_src emacs-lisp
(use-package deft
  :bind (("C-c d" . deft))
  :config
  (setq
   ;; "${HOME}/Dropbox/Notes" doesn't work, why is that?
   deft-directory "~/Dropbox/Notes"
   deft-default-extension "md"
   deft-extensions '("txt" "text" "utf8" "taskpaper" "md" "markdown" "org" "tex")
   deft-recursive t
   deft-text-mode 'gfm-mode
   deft-time-format " %Y-%m-%d %H:%M:%S"
   deft-use-filename-as-title t
   deft-use-filter-string-as-filename t)
  )
#+end_src

https://stackoverflow.com/a/35450025/3249688

#+BEGIN_SRC emacs-lisp
(defun yashi/new-scratch-buffer-in-org-mode ()
  (interactive)
  (switch-to-buffer (generate-new-buffer-name "*temp*"))
  (org-mode))
(bind-key "<f7>" 'yashi/new-scratch-buffer-in-org-mode)

(defun yashi/deft-new-file ()
  (interactive)
  (let ((deft-filter-regexp nil))
    (deft-new-file)))
(bind-key "<f6>" 'yashi/deft-new-file)
#+END_SRC

* CMake

This section needs to come after the Markdown section so that CMake files get recognized properly.

#+begin_src emacs-lisp
(use-package cmake-mode
  :mode
  (("CMakeLists\\.txt\\'" . cmake-mode)
   ("CMakeCache\\.txt\\'" . cmake-mode)
   ("\\.cmake\\'" . cmake-mode))
  :config
  (setq cmake-tab-width 4)
  )
#+end_src

* EditorConfig

http://editorconfig.org/

TODO How to make this take precedence over =dtrt-indent=?

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :diminish ""
  :init
  (add-hook 'prog-mode-hook (editorconfig-mode 1))
  (add-hook 'text-mode-hook (editorconfig-mode 1)))
#+END_SRC

* Julia

#+BEGIN_SRC emacs-lisp
(use-package julia-mode)
#+END_SRC

* Chapel

#+BEGIN_SRC emacs-lisp
(use-package chapel-mode)
#+END_SRC

* Lua

#+BEGIN_SRC emacs-lisp
(use-package lua-mode)
#+END_SRC

* Scala

#+BEGIN_SRC emacs-lisp
(use-package scala-mode)
#+END_SRC

* Ruby

#+BEGIN_SRC emacs-lisp
(setq ruby-indent-level 4)
#+END_SRC

* YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

* JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode (("\\.json\\'" . json-mode)
         ("\\.cjson\\'" . json-mode)))
#+END_SRC

* HTML

#+BEGIN_SRC emacs-lisp
(use-package web-mode)
#+END_SRC

* XML

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (cons '("\\.xmp\\'" . nxml-mode) auto-mode-alist))
#+END_SRC

* MATLAB/Octave

#+BEGIN_SRC emacs-lisp
;; Don't use matlab-mode.
;; (use-package matlab-mode)
;; I don't write Objective-C.
(assq-delete-all "\\.m\\'" auto-mode-alist)
(setq auto-mode-alist
      (cons '("\\.m\\'" . octave-mode) auto-mode-alist))
#+END_SRC

* CUDA

#+BEGIN_SRC emacs-lisp
(use-package cuda-mode)
#+END_SRC

* Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode)
#+END_SRC

* docview

#+begin_src emacs-lisp
(use-package doc-view
  :disabled t
  :config
  ;; paging up and down globally
  ;; (fset 'doc-prev "\C-xo\C-x[\C-xo")
  ;; (fset 'doc-next "\C-xo\C-x]\C-xo")
  ;; (global-set-key (kbd "M-[") 'doc-prev)
  ;; (global-set-key (kbd "M-]") 'doc-next)
  (define-key doc-view-mode-map (kbd "M-[") 'doc-view-previous-page)
  (define-key doc-view-mode-map (kbd "M-]") 'doc-view-next-page)
  ;; always refresh when the contents change
  )
#+end_src

* Scheme/Lisp

** Racket

#+BEGIN_SRC emacs-lisp
(use-package racket-mode
  ;; TODO the top one doesn't work?
  :mode (("\\.rkt[dl]?\\'" . racket-mode)
         ("\\.rkt\\'" . racket-mode)
         ("\\.ss\\'" . racket-mode))
  )
#+END_SRC

** Hy

#+BEGIN_SRC emacs-lisp
(use-package hy-mode
  :mode (("\\.hy\\'" . hy-mode)))
#+END_SRC

** General

Modified to remove/disable Racket.

#+BEGIN_SRC emacs-lisp
(use-package geiser
  :config
 (setq geiser-active-implementations (quote (guile chicken chez mit chibi)))
 (setq geiser-implementations-alist
   (quote
    (((regexp "\\.scm$")
      guile)
     ((regexp "\\.scm$")
      chicken)
     ((regexp "\\.release-info$")
      chicken)
     ((regexp "\\.meta$")
      chicken)
     ((regexp "\\.setup$")
      chicken)
     ((regexp "\\.ss$")
      chez)
     ((regexp "\\.def$")
      chez)
     ((regexp "\\.scm$")
      mit)
     ((regexp "\\.pkg$")
      mit)
     ((regexp "\\.scm$")
      chibi)
     ((regexp "\\.sld$")
      chibi))))
 )
#+END_SRC
