* General configuration

#+begin_src emacs-lisp
(setq-default user-full-name "Eric J. Berquist")
(setq-default user-mail-address "eric.berquist@gmail.com")

;; took some tricks from http://www.aaronbedra.com/emacs.d/

;; What's the difference between setq and setq-default?
;; See here: http://stackoverflow.com/questions/18172728/the-difference-between-setq-and-setq-default-in-emacs-lisp

;; http://stackoverflow.com/questions/3281581/how-to-word-wrap-in-emacs
;; http://stackoverflow.com/questions/12989072/showing-continuation-lines-in-emacs-in-a-text-terminal
(setq-default transient-mark-mode t)
(setq-default visual-line-mode t)
(setq-default truncate-lines nil)
(setq-default line-number-mode t)
(setq-default column-number-mode t)
(setq-default cursor-type 'box)

;; Enable maximum syntax highlighting wherever possible.
(setq-default global-font-lock-mode t)
(setq-default font-lock-maximum-decoration t)

;; Bells are annoying, stop ringing!
(setq-default visible-bell nil)
(setq-default audible-bell nil)
(setq-default ring-bell-function 'ignore)

;; 'y' is two characters less than 'yes'.
;; 'defalias' or 'fset'?
(defalias 'yes-or-no-p 'y-or-n-p)

;; death to tabs, tabs are evil
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; Line length when executing `fill-paragraph`. Default is 70. See
;; https://www.emacswiki.org/emacs/FillParagraph and
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Commands.html.
(setq-default fill-column 78)
;; (setq-default sentence-end-double-space nil)

;; Automatically reload buffers when their files change, and make sure
;; to check on the version control status every now and then.
(global-auto-revert-mode t)
;; TODO Turns out this is *extremely* irritating and moves the mark
;; every time the buffer refreshes!
;; (setq-default auto-revert-check-vc-info t)

;; Set up the initial scratch buffer.
;; http://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/
(setq initial-major-mode 'fundamental-mode)
(setq initial-scratch-message nil)

;; What platform are we on? darwin, gnu/linux are the most likely
;; answers.
(defvar system-type-as-string (prin1-to-string system-type))
(defun sys () system-type-as-string)

;; Set the path properly on macOS/Linux.
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :init
  (exec-path-from-shell-initialize))
#+end_src

* Encoding: Unicode/UTF-8

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

* Backups/autosaving

#+begin_src emacs-lisp
;; let's live on the edge and disable backup and autosave
(setq-default backup-inhibited t)
(setq-default auto-save-default nil)
(setq-default create-lockfiles nil)
(setq-default make-backup-files nil)
#+end_src

* Disable popup boxes

#+begin_src emacs-lisp
(defadvice yes-or-no-p (around prevent-dialog activate)
  "Prevent yes-or-no-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice y-or-n-p (around prevent-dialog-yorn activate)
  "Prevent y-or-n-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
#+end_src

* Key bindings

- To view all current keybindings, =C-h b=.
- To view all personal keybindings, =M-x describe-personal-keybindings=.
- Used to have stuff for ='comment-or-uncomment-region=, ='comment-region=, and ='uncomment-region= here, but =M-;= calls ='comment-dwim=, which is what you really want.

#+begin_src emacs-lisp
(bind-key (kbd "C-x C-b") 'switch-to-buffer)
(bind-key (kbd "C-x b") 'ibuffer)
(bind-key (kbd "C-c b") 'switch-to-previous-buffer)

(bind-key (kbd "C-+") 'text-scale-increase)
(bind-key (kbd "C--") 'text-scale-decrease)

(bind-key (kbd "C-x C-h") 'replace-string)

(bind-key (kbd "C-c p") 'pwd)
#+end_src

* dir-locals

Taken from https://emacs.stackexchange.com/a/13096/10950

#+BEGIN_SRC emacs-lisp
(defun my-reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun my-reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the 
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir))
        (my-reload-dir-locals-for-current-buffer)))))

;; (add-hook 'emacs-lisp-mode-hook
;;           (defun enable-autoreload-for-dir-locals ()
;;             (when (and (buffer-file-name)
;;                        (equal dir-locals-file
;;                               (file-name-nondirectory (buffer-file-name))))
;;               (add-hook (make-variable-buffer-local 'after-save-hook)
;;                         'my-reload-dir-locals-for-all-buffer-in-this-directory))))
#+END_SRC

* Parens/whitespace/indentation

See https://www.lunaryorn.com/posts/my-emacs-configuration-with-use-package.

#+begin_src emacs-lisp
(use-package mic-paren
  :config
  (setq paren-delay nil)
  (setq paren-highlight-at-point t)
  (setq paren-highlight-offscreen t)
  :init
  (paren-activate))

(use-package whitespace
  :bind (("C-c t" . whitespace-mode))
  :mode (("\\.csv\\'" . whitespace-mode)
         ("\\.tab\\'" . whitespace-mode)
         ("\\.tsv\\'" . whitespace-mode))
  :config
   ;; use the fill-column value
  (setq whitespace-line-column nil)
  (setq whitespace-display-mappings
   '((space-mark   ?\    [?\u00B7]     [?.])                    ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
     ;; (space-mark ?\s [183] [46])
     ;; (space-mark 32 [32] [46]) ; normal space, display nothing
     (space-mark   ?\xA0 [?\u00A4]     [?_])                    ; hard space: currency sign
     ;; (newline-mark ?\n [9166 10] [36 10])                    ; 10 LINE FEED, 9166 RETURN SYMBOL 「⏎」, 36 DOLLAR SIGN 「$」
     (newline-mark ?\n   [?\u21B5 ?\n] [172 10] [?\u00AF ?\n])  ; eol: downwards arrow with corner leftwards, ..., macron
     (tab-mark     ?\t   [9655 9]      [92 9] ))                ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」, 92 9 CHARACTER TABULATION 「\t」
   whitespace-style
   '(face
     trailing
     tabs
     ;; spaces
     ;; lines
     ;; lines-tail
     newline
     empty
     ;; indentation::tab
     ;; indentation::space
     ;; indentation
     ;; big-indent
     space-after-tab::tab
     ;; space-after-tab::space
     ;; space-after-tab
     space-before-tab::tab
     ;; space-before-tab::space
     space-before-tab
     space-mark
     tab-mark
     newline-mark
     ))
  ;; By default, `space-before-tab` considers zero or more spaces before a
  ;; tab, but `space-after-tab` only considers `tab-width` or more
  ;; spaces. Since my goal is not to look for indentation problems, but find
  ;; _any_ mixing, consider any number of spaces after a tab. Additionally,
  ;; apply font locking to the spaces, not the tab.
  (setq whitespace-space-after-tab-regexp '("\011+\\(\\( \\{0,\\}\\)+\\)" . "\\(\011+\\) \\{0,\\}"))
  :init
  (setq global-whitespace-mode nil))

(use-package dtrt-indent
  :init
  (dtrt-indent-mode 1))

(use-package aggressive-indent
  :disabled t
  :init
  (global-aggressive-indent-mode 1))

(use-package unfill
  :bind (("C-M-q" . unfill-paragraph)))

;; Always place a newline at the end of files, like nano does by
;; default.
(setq require-final-newline t)
#+end_src

* Theming and window shaping

** mode line

#+BEGIN_SRC emacs-lisp
(use-package delight)
#+END_SRC

** Themes

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'wombat2 t)

;; Other themes I like to have installed:
(use-package abyss-theme)
(use-package dracula-theme)
(use-package gotham-theme)
(use-package lush-theme)
(use-package monochrome-theme)
(use-package plan9-theme)
(use-package punpun-theme) ; (punpun-light, punpun-dark)
(use-package quasi-monochrome-theme)
(use-package rebecca-theme)
#+end_src

** Windows

#+begin_src emacs-lisp
(when (display-graphic-p)
  (set-face-attribute 'default nil :font "Panic Sans-11")
  (set-frame-font "Panic Sans-11"))
;; How can I set fallback fonts if these aren't installed?
;; Or just try from a list?

;; TODO set to maximized
(when (display-graphic-p)
  (if (eq system-type 'darwin)
      (set-frame-size (selected-frame) 191 55)))

(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))
(setq-default indicate-buffer-boundaries 'right)
#+end_src

* Ido and searching

- Some handy tips for [[https://www.masteringemacs.org/article/introduction-to-ido-mode]["Interactively DO things."]]
- http://oremacs.com/2015/02/09/ido-vertical/

#+begin_src emacs-lisp
(use-package ido
  :config
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  ;; wow, that *is* annoying!
  (setq ido-use-filename-at-point nil)
  (setq ido-use-url-at-point nil)
  :init
  (ido-mode t))
(use-package ido-vertical-mode
  :disabled t
  :config
  (setq ido-vertical-show-count t)
  :init
  (ido-vertical-mode 1))
#+end_src

#+BEGIN_SRC emacs-lisp
(add-to-list 'completion-ignored-extensions ".html")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :disabled t
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  :init
  (ivy-mode 1))
(use-package counsel
  :disabled t
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)))
(use-package swiper
  :disabled t
  :bind ("C-s" . swiper))
#+END_SRC

Source for anzu can be found [[https://github.com/syohex/emacs-anzu][here]].

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :delight
  ;; M-% and C-M-% are the original query-replace(-regexp) shortcuts
  ;; :bind (("C-x C-g" . anzu-query-replace)
  ;;        ("C-x C-a" . anzu-query-replace-regexp))
  :init
  (global-anzu-mode 1))
#+END_SRC

Some of my computers have [[https://github.com/BurntSushi/ripgrep][ripgrep]] installed. Use =M-x ripgrep-regexp= to activate.

#+BEGIN_SRC emacs-lisp
(use-package ripgrep)
#+END_SRC

* Spelling

=C-;= to try and correct a misspelled word on a line.

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :config
  (setq langtool-default-language "en-US")
  (setq langtool-mother-tongue "en")
  ;; TODO update
  (if (eq system-type 'darwin)
      (setq langtool-language-tool-server-jar "/usr/local/Cellar/languagetool/4.1/libexec/languagetool-server.jar"
            langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.1/libexec/languagetool-commandline.jar"))
  ;; Arch Linux
  (if (eq system-type 'gnu/linux)
      (setq langtool-language-tool-server-jar "/usr/share/java/languagetool/languagetool-server.jar"
            langtool-language-tool-jar "/usr/share/java/languagetool/languagetool-commandline.jar")))
#+END_SRC

TODO clean this up, figure out LaTeX

#+begin_src emacs-lisp
(use-package flyspell
  ;; built-in binding is M-$, ew
  :bind (("<f8>" . ispell-word)
         ("C-S-<f8>" . flyspell-mode)
         ("C-M-<f8>" . flyspell-buffer)
         ("C-<f8>" . flyspell-check-previous-highlighted-word))
  :config
  (setq flyspell-issue-welcome-flag nil)
  (setq flyspell-mode-line-string " FlyS"))

;; These are the modes flyspell should be enabled/disabled for
;; (https://www.emacswiki.org/emacs/FlySpell#toc1).
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook
                log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))
;; Don't enable flyspell for programming-type modes.
;; (dolist (mode '(emacs-lisp-mode-hook
;;                 inferior-lisp-mode-hook
;;                 python-mode-hook))
;;   (add-hook mode
;;             '(lambda ()
;;                (flyspell-prog-mode))))
(defun flyspell-check-next-highlighted-word ()
  "Custom function to spell check next highlighted word"
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word))
(bind-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)
#+end_src

** word count

#+BEGIN_SRC emacs-lisp
(use-package wc-mode
  :bind (("C-c w" . wc-mode)))
#+END_SRC

* Completion and language servers

#+BEGIN_SRC emacs-lisp
(use-package company
  :disabled t
  :custom (company-idle-delay 0.05)
  :init
  (add-hook 'after-init-hook 'global-company-mode))
(use-package company-c-headers
  :disabled t
  :init
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-c-headers)))
(use-package company-irony
  :disabled t)
(use-package company-irony-c-headers
  :disabled t)
(use-package lsp-mode
  :disabled t
  :commands lsp)
(use-package lsp-ui
  :disabled t
  :commands lsp-ui-mode)
(use-package company-lsp
  :disabled t
  :commands company-lsp
  :init
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-lsp)))
(use-package eglot
  :disabled t)
#+END_SRC

* Flycheck

** General

TODO add LaTex

#+begin_src emacs-lisp
(use-package flycheck
  :bind (("C-c f" . flycheck-mode))
  :config
  (setq flycheck-check-syntax-automatically '(mode-enabled save))
  (setq flycheck-markdown-mdl-style "~/.mdlrc")
  (setq flycheck-pylintrc "~/.pylintrc")
  :init
  (global-flycheck-mode))
#+end_src

** Shell

For this to work, =checkbashisms= needs to be available on the =$PATH=:

#+begin_src sh
yaourt -S checkbashisms # Arch Linux, from AUR
brew install checkbashisms # Mac OS X, from Homebrew
sudo apt-get install devscripts # Debian/Ubuntu, official
sudo yum install rpmdevtools # Red Hat/CentOS
sudo pkg install checkbashisms # FreeBSD
#+end_src

#+begin_src emacs-lisp
(use-package flycheck-checkbashisms
  :hook (flycheck-mode . flycheck-checkbashisms-setup)
  :config
  ;; Check 'echo -n' usage
  (setq flycheck-checkbashisms-newline t)
  (setq flycheck-checkbashisms-posix t))
#+end_src

** Prose

Integration with [[https://github.com/errata-ai/vale][vale]].

#+BEGIN_SRC emacs-lisp
(use-package flycheck-vale
  :hook (flycheck-mode . flycheck-vale-setup))
#+END_SRC

* Git/version control

** General

#+BEGIN_SRC emacs-lisp
;; Even though VC systems (at least git) commit the symbolic link pointer
;; itself, and not the file it's pointing to, I want to edit the file.
(setq vc-follow-symlinks t)
#+END_SRC

** Git

- [[https://magit.vc/manual/magit/Getting-started.html][magit: Getting Started]]

#+BEGIN_SRC emacs-lisp
(use-package git-commit
  :init
  (global-git-commit-mode))
(use-package gitattributes-mode
  :mode (("\\.gitattributes\\'" . gitattributes-mode)))
(use-package gitconfig-mode
  :mode (("\\.gitconfig\\'" . gitconfig-mode)))
(use-package gitignore-mode
  :mode (("\\.gitignore\\'" . gitignore-mode)))
(use-package magit
  ;; "Getting started" uses C-x g, which is also undefined.
  :bind (("C-c m" . magit-status))
  :config
  (setq magit-commit-arguments '("--verbose")))
(use-package magit-svn
  :hook magit-mode)
#+END_SRC

Not using =git-gutter= right now, but if I did...

#+BEGIN_SRC emacs-lisp
(setq git-gutter:handled-backends '(git svn hg bzr))
(setq git-gutter:hide-gutter t)
#+END_SRC

* Pandoc

#+begin_src emacs-lisp
(use-package pandoc-mode
  :hook (pandoc-mode . pandoc-load-default-settings))
#+end_src

* Org

#+begin_src emacs-lisp
;; http://orgmode.org/manual/Code-evaluation-security.html
(defun my-org-confirm-babel-evaluate (lang body)
  (not (equal lang "latex")))

(use-package org
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :config
  (setq org-agenda-files '("~/Dropbox/Notes"
                           "~/Dropbox/research/lab_notebook"))
  (setq org-babel-tangle-lang-exts '(("python" . "py")
                                     ("emacs-lisp" . "el")
                                     ("elisp" . "el")))
  (setq org-closed-keep-when-no-todo t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-descriptive-links nil)
  (setq org-directory "~/Dropbox/Notes")
  (setq org-edit-src-content-indentation 0)
  (setq org-export-backends '(ascii html icalendar latex md))
  (setq org-export-dispatch-use-expert-ui t)
  (setq org-export-with-smart-quotes t)
  ;; http://stackoverflow.com/questions/17239273/org-mode-buffer-latex-syntax-highlighting
  (setq org-highlight-latex-and-relatex '(latex script entities))
  (setq org-html-with-latex '(mathjax))
  (setq org-image-actual-width nil)
  (setq org-latex-create-formula-image-program 'imagemagick)
  (setq org-latex-hyperref-template "\\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},\n pdfsubject={%d},\n pdfcreator={%c},\n pdflang={%L},\n colorlinks=true,\n linkcolor=MidnightBlue,\n citecolor=MidnightBlue,\n urlcolor=MidnightBlue}\n")
  (setq org-latex-inline-image-rules '(("file" . "\\.\\(pdf\\|jpeg\\|jpg\\|png\\|ps\\|eps\\|tikz\\|pgf\\|svg\\|gif\\)\\'")))
  (setq org-latex-pdf-process '("latexmk -pdf -xelatex -shell-escape -output-directory=%o %f"))
  (setq org-list-allow-alphabetical t)
  (setq org-log-done 'time)
  (setq org-log-done-with-time t)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-startup-folded nil)
  ;; http://superuser.com/questions/299886/linewrap-in-org-mode-of-emacs
  (setq org-startup-truncated nil)
  ;; http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html
  ;; You need to install pygments to use minted.
  (when (executable-find "pygmentize")
    ;; Add minted to the defaults packages to include when exporting.
    (add-to-list 'org-latex-packages-alist '("" "minted" nil))
    ;; Tell the latex export to use the minted package for source code
    ;; coloration.
    (setq org-latex-listings 'minted)
    ;; Let the exporter use the -shell-escape option to let latex execute
    ;; external programs.  This obviously and can be dangerous to activate!
    (setq org-latex-minted-options
          '(("framesep" "2mm"))))
  (add-to-list 'org-latex-packages-alist '("" "braket" t))
  (add-to-list 'org-latex-packages-alist '("final" "microtype" nil))
  (add-to-list 'org-latex-packages-alist '("usenames,dvipsnames,svgnames,table" "xcolor" nil))
  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes '("refsheet" "\\documentclass{refsheet}"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))
(use-package htmlize)
(use-package ox-gfm)
(use-package ox-pandoc)
#+end_src

From https://emacs.stackexchange.com/questions/20577/org-babel-load-all-languages-on-demand.

#+BEGIN_SRC emacs-lisp
(defadvice org-babel-execute-src-block (around load-language nil activate)
  "Load language if needed"
  (let ((language (org-element-property :language (org-element-at-point))))
    (unless (cdr (assoc (intern language) org-babel-load-languages))
      (add-to-list 'org-babel-load-languages (cons (intern language) t))
      (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
    ad-do-it))
#+END_SRC

Additional things of interest might be found in https://github.com/xiaohanyu/oh-my-emacs/blob/master/core/ome-org.org.

Every time an Org buffer is saved, automatically export it to HTML. Taken from https://www.reddit.com/r/emacs/comments/4golh1/how_to_auto_export_html_when_saving_in_orgmode/.

#+BEGIN_SRC emacs-lisp
(defun org-mode-export-hook ()
  (add-hook 'after-save-hook 'org-html-export-to-html t t))
(add-hook 'org-mode-hook #'org-mode-export-hook)
#+END_SRC

A function to toggle this auto-HTML-export behavior. Does this play nice with the function above?

#+BEGIN_SRC emacs-lisp
(defun toggle-org-html-export-on-save ()
  (interactive)
  (if (memq 'org-html-export-to-html after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-html-export-to-html t)
        (message "Disabled org html export on save for current buffer..."))
    (add-hook 'after-save-hook 'org-html-export-to-html nil t)
    (message "Enabled org html export on save for current buffer...")))
#+END_SRC

# ** org-ref

# #+BEGIN_SRC emacs-lisp
# (use-package org-ref
#   :config
#   (setq reftex-default-bibliography '("~/Dropbox/_bibliography/references.bib")
#         org-ref-bibliography-notes "~/Dropbox/_bibliography/notes.org"
#         org-ref-default-bibliography '("~/Dropbox/_bibliography/references.bib")
#         org-ref-pdf-directory "~/Dropbox/_bibliography/bibtex-pdfs"
#         bibtex-dialect 'biblatex))
# #+END_SRC

* Compilation

Taken from https://emacs.stackexchange.com/questions/62/hide-compilation-window#110.

#+BEGIN_SRC emacs-lisp
;; No longer automatically hide the compilation window.
;; (add-hook 'compilation-finish-functions
;;           (lambda (buf strg)
;;             ;; https://stackoverflow.com/a/16245593/3249688
;;             (when (not (derived-mode-p 'ripgrep-search-mode))
;;               (let ((win (get-buffer-window buf 'visible)))
;;                 (when win (delete-window win))))))
(defun ejb/comint-clear ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
(bind-key (kbd "C-c l") 'ejb/comint-clear comint-mode-map)
#+END_SRC

* C/C++

#+begin_src emacs-lisp
(setq auto-mode-alist
     (append '(("\\.C\\'" . c++-mode)
               ("\\.cc\\'" . c++-mode)
               ("\\.cpp\\'" . c++-mode)
               ("\\.c\\'" . c-mode)
               ("\\.h\\'" . c++-mode)
               ("\\.hh\\'" . c++-mode)
               ("\\.hpp\\'" . c++-mode))
               auto-mode-alist))
#+end_src

These are valid for all C-style modes (I think).

#+BEGIN_SRC emacs-lisp
(setq c-basic-offset 4)
(setq c-default-style
      '((java-mode . "java")
        (awk-mode . "awk")
        (other . "k&r")))
(setq c-doc-comment-style
      '((c-mode . javadoc)
        (java-mode . javadoc)
        (pike-mode . autodoc)))
#+END_SRC

This only makes sense for c++-mode.

https://stackoverflow.com/questions/2619853/emacs-override-indentation

#+BEGIN_SRC emacs-lisp
(defun my-c++-setup ()
  (c-set-offset 'innamespace [0]))
(add-hook 'c++-mode-hook 'my-c++-setup)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :bind (("C-M-<tab>" . clang-format-region)))
#+END_SRC

TODO What's the difference between =c++-mode= and =cc-mode=?

** ISPC

Taken from an [[https://github.com/ispc/ispc/issues/1105][ISPC GitHub issue]].

#+begin_src emacs-lisp
(font-lock-add-keywords 'c++-mode '(("\\<\\(uniform\\)" . 'font-lock-keyword-face)
                                    ("\\<\\(varying\\)" . 'font-lock-keyword-face)
                                    ("\\<\\(export\\)" . 'font-lock-keyword-face)))
(add-to-list 'auto-mode-alist '("\\.ispc\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.isph\\'" . c++-mode))
#+end_src

* Makefiles

#+begin_src emacs-lisp
(setq auto-mode-alist
      (append '(("Makefile*\\'" . makefile-mode)
                ("makefile*\\'" . makefile-mode))
              auto-mode-alist))
#+end_src

* FORTRAN

#+begin_src emacs-lisp
;; These might already be defaults, but it doesn't hurt.
(setq auto-mode-alist
      (append '(("\\.f\\'"   . fortran-mode)
                ("\\.F\\'"   . fortran-mode)
                ("\\.for\\'" . fortran-mode)
                ("\\.f90\\'" . f90-mode)
                ("\\.F90\\'" . f90-mode)
                ("\\.f95\\'" . f90-mode)
                ("\\.f03\\'" . f90-mode)
                ("\\.f08\\'" . f90-mode))
              auto-mode-alist))
(setq fortran-comment-region "C")
#+end_src

* PKGBUILDs

#+begin_src emacs-lisp
(use-package pkgbuild-mode
  :mode
  (("/PKGBUILD/" . pkgbuild-mode)))
#+end_src

* LaTeX

#+begin_src emacs-lisp
(use-package auctex)
(use-package auctex-latexmk
  :init
  (auctex-latexmk-setup))
;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
;; (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
;; (setq font-latex-math-environments
;;       (append '("dmath")
;;               font-latex-math-environments))
#+end_src

* Python

#+begin_src emacs-lisp
;; The package is "python" but the mode is "python-mode":
(use-package python
  :mode (("\\.ipy\\'" . python-mode))
  :interpreter ("ipython" . python-mode)
  :config
  (setq python-fill-docstring-style 'pep-257-nn))

(use-package pydoc)

(use-package company-jedi
  :disabled t
  :init
  (with-eval-after-load 'company
                       (add-to-list 'company-backends 'company-jedi)))
(use-package anaconda-mode
  :hook ((python-mode . anaconda-mode)
         (python-mode . anaconda-eldoc-mode)))
(use-package company-anaconda
  :disabled t
  :init
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-anaconda)))
#+end_src

** Linters

#+begin_src emacs-lisp
;; Use pyflakes instead of flake8 or pylint for syntax checking.
;; I think stuffing the setq under config activates this for Python.
(use-package flycheck-pyflakes)
  ;; :config
  ;; Don't disable these, in case pyflakes isn't available.
  (add-to-list 'flycheck-disabled-checkers 'python-flake8)
  ;; (add-to-list 'flycheck-disabled-checkers 'python-pylint)
  ;; (add-to-list 'flycheck-disabled-checkers 'python-pycompile)
  ;; )
;; Enable the use of both pyflakes and pylint.
;; https://github.com/flycheck/flycheck/issues/186
;; (flycheck-add-next-checker 'python-pyflakes 'python-pylint)

(use-package flycheck-mypy)

(use-package flycheck-pyre
  :hook (flycheck-mode . flycheck-pyre-setup))

(use-package flycheck-pycheckers
  :disabled t
  :custom (flycheck-pycheckers-checkers '(pylint flake8 pyflakes mypy3 bandit))
  :hook (flycheck-mode . flycheck-pycheckers-setup))

(use-package blacken
  :disabled t
  :hook python-mode)

(use-package yapfify
  :disabled t
  :hook (python-mode . yapf-mode))
#+end_src

** Cython

#+BEGIN_SRC emacs-lisp
(use-package cython-mode)
(use-package flycheck-cython)
#+END_SRC

** pip

#+BEGIN_SRC emacs-lisp
(use-package pip-requirements)
#+END_SRC

* Markdown

Rather than use =--mathjax== with a URL argument, =--include-in-header= allows the insertion of arbitrary HTML into Pandoc's output. The =mathjax.html= file contains Chemistry Stack Exchange's header scripts for first configuring the MathJax extension to load =mhchem=, then loads MathJax.

See https://stackoverflow.com/questions/25410701/how-do-i-include-meta-tags-in-pandoc-generated-html for an example of how including arbitrary HTML works.

See https://chemistry.meta.stackexchange.com/questions/3540/what-additional-formatting-features-are-available-to-mathjax-possibly-via-requ for more information about what can be done with the MathJax extension.

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.mdown\\'" . markdown-mode)
         ("\\.md\\'" . markdown-mode))
  :hook (markdown-mode . pandoc-mode)
  :config
  (add-hook 'markdown-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'pandoc-run-pandoc t :local)))
  :init
  (setq markdown-asymmetric-header t)
  (setq markdown-content-type "application/xhtml+xml")
  ;; This isn't super necessary since I have pandoc run a similar command
  ;; every time I save with these default arguments, but this always produces
  ;; HTML where pandoc-mode might not.
  (setq markdown-command "pandoc --from=markdown --to=html5 --highlight-style=pygments --standalone --include-in-header=${HOME}/.emacs.d/mathjax.html")
  (setq markdown-enable-math t)
  (setq markdown-fontify-code-blocks-natively t)
  (setq markdown-hide-markup nil)
  (setq markdown-hide-urls nil)
  (setq markdown-italic-underscore t)
  (setq markdown-link-space-sub-char "-"))
#+end_src

** polymode

#+BEGIN_SRC emacs-lisp
(use-package poly-markdown)
#+END_SRC

* deft

Taken conveniently from [[http://jblevins.org/projects/deft/][Jason Blevins' website]] and http://pragmaticemacs.com/emacs/make-quick-notes-with-deft/.

#+begin_src emacs-lisp
(use-package deft
  :bind (("C-c d" . deft))
  :config
  (setq deft-auto-save-interval 60.0)
  ;; "${HOME}/Dropbox/Notes" doesn't work, why is that?
  (setq deft-directory "~/Dropbox/Notes")
  (setq deft-default-extension "md")
  (setq deft-extensions '("txt" "text" "utf8" "taskpaper" "md" "markdown" "org" "tex"))
  (setq deft-recursive t)
  (setq deft-text-mode 'gfm-mode)
  (setq deft-time-format " %Y-%m-%d %H:%M:%S")
  (setq deft-use-filename-as-title t)
  (setq deft-use-filter-string-as-filename t))
#+end_src

https://stackoverflow.com/a/35450025/3249688

#+BEGIN_SRC emacs-lisp
(defun yashi/new-scratch-buffer-in-org-mode ()
  (interactive)
  (switch-to-buffer (generate-new-buffer-name "*temp*"))
  (org-mode))
(bind-key "<f7>" 'yashi/new-scratch-buffer-in-org-mode)

(defun yashi/deft-new-file ()
  (interactive)
  (let ((deft-filter-regexp nil))
    (deft-new-file)))
(bind-key "<f6>" 'yashi/deft-new-file)
#+END_SRC

* CMake

This section needs to come after the Markdown section so that CMake files get recognized properly.

#+begin_src emacs-lisp
(use-package cmake-mode
  :mode
  (("CMakeLists\\.txt\\'" . cmake-mode)
   ("CMakeCache\\.txt\\'" . cmake-mode)
   ("\\.cmake\\'" . cmake-mode))
  :config
  (setq cmake-tab-width 4))
#+end_src

* Shell Scripts

https://www.reddit.com/r/emacs/comments/5tzub2/improving_shellscriptmode_highlight/

#+BEGIN_SRC emacs-lisp
(defconst sh-mode--string-interpolated-variable-regexp
  "{\\$[^}\n\\\\]*\\(?:\\\\.[^}\n\\\\]*\\)*}\\|\\${\\sw+}\\|\\$\\sw+")

(defun sh-mode--string-interpolated-variable-font-lock-find (limit)
  (while (re-search-forward sh-mode--string-interpolated-variable-regexp limit t)
    (let ((quoted-stuff (nth 3 (syntax-ppss))))
      (when (and quoted-stuff (member quoted-stuff '(?\" ?`)))
        (put-text-property (match-beginning 0) (match-end 0)
                           'face 'font-lock-variable-name-face))))
  nil)

;; TODO I'm not sure why this doesn't work.
;; (with-eval-after-load 'sh-mode
;;   (font-lock-add-keywords 'sh-mode
;;                           `(sh-mode--string-interpolated-variable-font-lock-find)
;;                           'append))
(font-lock-add-keywords 'sh-mode
                        `((sh-mode--string-interpolated-variable-font-lock-find))
                        'append)

;; This doesn't work because it only finds the first instance.
;; (font-lock-add-keywords 'sh-mode '(("\".*?\\(\\${.*?}\\).*?\"" 1 font-lock-variable-name-face prepend)))
#+END_SRC

* EditorConfig

http://editorconfig.org/

TODO How to make this take precedence over =dtrt-indent=?

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :hook ((prog-mode text-mode) . (lambda () (editorconfig-mode 1)))
  :config
  (defun ejb/editorconfig-has-editorconfig ()
    "If there is an .editorconfig file associated with the
current buffer, return its path, otherwise nil."
    (if buffer-file-name
        (let* ((directory (file-name-directory buffer-file-name))
               (file (editorconfig-core-get-nearest-editorconfig directory)))
          file)))
  (defun ejb/editorconfig-mode-lighter ()
    "Only display the lighter if an .editorconfig file has been found."
    (if (ejb/editorconfig-has-editorconfig)
        " EditorConfig"
      ""))
  :delight '(:eval (ejb/editorconfig-mode-lighter)))
#+END_SRC

* Julia

#+BEGIN_SRC emacs-lisp
(use-package julia-mode)
(use-package flycheck-julia
  :hook (flycheck-mode . flycheck-julia-setup))
#+END_SRC

* Ruby

#+BEGIN_SRC emacs-lisp
(setq ruby-indent-level 4)
#+END_SRC

* YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
(use-package flycheck-yamllint
  :hook (flycheck-mode . flycheck-yamllint-setup))
#+END_SRC

* Conf (builtin)

#+BEGIN_SRC emacs-lisp
(use-package conf-mode
  :mode
  ; generic
  ((".nanorc" . conf-space-mode)
   (".coveragerc" . conf-unix-mode)
   ; Python tools (linter config)
   (".flake8" . conf-unix-mode)
   (".pylintrc" . conf-unix-mode)
   (".style.yapf" . conf-unix-mode)))
#+END_SRC

* JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode (("\\.json\\'" . json-mode)
         ("\\.cjson\\'" . json-mode)
         ("\\.qcjson\\'" . json-mode)))
#+END_SRC

* HTML

#+BEGIN_SRC emacs-lisp
(use-package web-mode)
(use-package jinja2-mode
  :mode (("\\.j2\\'" . jinja2-mode)))
(use-package web-beautify
  :config
  (eval-after-load 'js2-mode
    '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
  (eval-after-load 'json-mode
    '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))
  (eval-after-load 'sgml-mode
    '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))
  (eval-after-load 'css-mode
    '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css)))
#+END_SRC

* XML

#+BEGIN_SRC emacs-lisp
(use-package nxml
  :mode (("\\.rdf\\'" . nxml-mode)
         ("\\.xmp\\'" . nxml-mode)))
#+END_SRC

* MATLAB/Octave

#+BEGIN_SRC emacs-lisp
;; Don't use matlab-mode.
;; (use-package matlab-mode)
;; I don't write Objective-C.
(assq-delete-all "\\.m\\'" auto-mode-alist)
(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
;; (setq octave-block-offset 4)
#+END_SRC

* Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode)
(use-package cargo)
(use-package flycheck-rust
  :init
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+END_SRC

* docview

#+begin_src emacs-lisp
(use-package doc-view
  :disabled t
  :bind (:map doc-view-mode-map
              ("M-[" . doc-view-previous-page)
              ("M-]" . doc-view-next-page)))
#+end_src

* Scheme/Lisp

** Lisp

#+BEGIN_SRC emacs-lisp
(setq common-lisp-hyperspec-root (expand-file-name "~/.emacs.d/clhs/HyperSpec/"))
(use-package slime
  :config
  (setq inferior-lisp-program "clisp")
  :init
  (require 'slime-autoloads)
  (add-to-list 'slime-contribs 'slime-fancy))
#+END_SRC

** Hy

#+BEGIN_SRC emacs-lisp
(use-package hy-mode
  :mode (("\\.hy\\'" . hy-mode)))
#+END_SRC

** Scheme

Modified to remove/disable Racket.

#+BEGIN_SRC emacs-lisp
(use-package geiser
  :config
  (setq geiser-active-implementations '(guile chicken chez mit chibi))
  (setq geiser-implementations-alist '(((regexp "\\.scm\\'") guile)
                                       ((regexp "\\.scm\\'") chicken)
                                       ((regexp "\\.release-info\\'") chicken)
                                       ((regexp "\\.meta\\'") chicken)
                                       ((regexp "\\.setup\\'") chicken)
                                       ((regexp "\\.ss\\'") chez)
                                       ((regexp "\\.def\\'") chez)
                                       ((regexp "\\.scm\\'") mit)
                                       ((regexp "\\.pkg\\'") mit)
                                       ((regexp "\\.scm\\'") chibi)
                                       ((regexp "\\.sld\\'") chibi))))
#+END_SRC

** Racket

#+BEGIN_SRC emacs-lisp
(use-package racket-mode
  ;; TODO the top one doesn't work?
  :mode (("\\.rkt[dl]?\\'" . racket-mode)
         ("\\.rkt\\'" . racket-mode)))
#+END_SRC

* Kotlin

#+BEGIN_SRC emacs-lisp
(use-package kotlin-mode
  :mode (("\\.kt\\'" . kotlin-mode)
         ("\\.kts\\'" . kotlin-mode))) ; Kotlin script
(use-package flycheck-kotlin
  :init
  (with-eval-after-load 'flycheck
    (flycheck-kotlin-setup)))
#+END_SRC

* SPARQL

#+BEGIN_SRC emacs-lisp
(use-package sparql-mode
  :mode (("\\.sparql\\'" . sparql-mode)
         ("\\.rq\\'" . sparql-mode)))
#+END_SRC

* Turtle

#+BEGIN_SRC emacs-lisp
(use-package ttl-mode
  :delight "N3/Turtle"
  :mode (("\\.n3\\'" . ttl-mode)    ; Notation3
         ("\\.nt\\'" . ttl-mode)    ; N-Triples
         ("\\.shacl\\'" . ttl-mode) ; SHACL (not a graph, but constraints; looks similar)
         ("\\.ttl\\'" . ttl-mode)   ; Turtle (Terse RDF Triple Language)
         ("\\.turtle\\'" . ttl-mode)))
#+END_SRC

* Other languages

#+BEGIN_SRC emacs-lisp
(use-package chapel-mode)
(use-package dockerfile-mode)
(use-package cuda-mode)
(use-package graphviz-dot-mode)
(use-package lua-mode)
(use-package mediawiki)
(use-package nim-mode)
(use-package scala-mode)
(use-package strace-mode)
(use-package systemd)
#+END_SRC

* Discord

#+BEGIN_SRC emacs-lisp
(use-package elcord
  :disabled t
  :init
  (elcord-mode))
#+END_SRC
