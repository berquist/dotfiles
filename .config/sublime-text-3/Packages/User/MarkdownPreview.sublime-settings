{
    "browser": "default",
    "parser": "markdown",
    "build_action": "build",
    "enable_mathjax": true,
    "enable_uml": true,
    "enable_highlight": true,
    "enable_pygments": true,

    /*
        List of enabled extensions of the selected markdown parser.

        You can get the full list of extensions at:
            * The python markdown parser, the `markdown`: http://pythonhosted.org/Markdown/extensions/index.html


        default - use the default set of extensions, see table later.
        [ "default", "def_list", ... ] - a list of extensions. Use "default" to include the default extensions.

         Parser     | "default" Values
        ------------|---------------------------
         default    | ["extra", "github", "toc", "headerid", "meta", "sane_lists", "smarty", "wikilinks"]
         markdown   | ["extra", "github", "toc", "headerid", "meta", "sane_lists", "smarty", "wikilinks"]
         github     | extension's values are not used.

    */
    "enabled_extensions": "default",
    "enabled_parsers": ["markdown", "github"],
    "github_mode": "markdown",
    "github_inject_header_ids": false,

    /*
        Uses an OAuth token when parsing markdown with GitHub API. To create one for Markdown Preview, see https://help.github.com/articles/creating-an-oauth-token-for-command-line-use.
    */
    // "github_oauth_token": "secret",

    /*
        Specify a HTML template file to render your markdown within.

        Available place holders in HTML template:
        {{ HEAD }} - would be replaced by generated stylesheets, javascripts enabled above
        {{ BODY }} - would be replaced by HTML converted from markdown

        By setting "skip_default_stylesheet" to true you can use the styles only in your HTML
        template. In most cases you should turn this setting on to have a full-featured design.

        Refer to 'customized-template-sample.html' as a show case.
    */
    // "html_template": "/ABS_PATH_TO_A_HTML_FILE",
    // "skip_default_stylesheet": true,


    /*
        Sets the JavaScript files to embed in the HTML

        Set an array of URLs or filepaths to JavaScript files. Absolute filepaths will be loaded
        into the script tag; others will be set as the `src` attribute. The order of files in the
        array is the order in which they are embedded.
    */
    // "js": ["http://example.com/script.js", "/path/to/script.js"],

    /*
        Enable or not whether parsed files will be auto-reloaded on save
    */
    "enable_autoreload": true,

    /*
        Sets the supported filetypes for auto-reload on save
    */
    "markdown_filetypes": [".md", ".markdown", ".mdown"],

    /*
        Sets a custom temporary folder for MarkdownPreview-generated HTML files. Useful if you're
        using LiveReload and don't want to use the OS default. The directory will be created if it
        doesn't exist. Relative paths are supported, and are checked against `os.path.isabs`, see
        doc: http://docs.python.org/3/library/os.path.html#os.path.isabs

        Examples: /tmp/custom_folder   (Linux/OSX - absolute path)
                    C:/TEMP/MYNOTES
                    C:\\TEMP\\MYNOTES    (Windows - absolute path, forward slash or escaped back slash)
                    build                (All OS - relative path, current dir)
                    ../build             (Linux/OSX - relative path, in parent dir)
                    ..\\build            (Windows - relative path, in parent dir)
    */
    // "path_tempfile": "/tmp/my_notes",

    /*
        Absolute path to multimarkdown executable
    */
    "multimarkdown_binary": "",

    /*
        Sets HTML output to a simple form:
            - No head
            - No body tags
            - ids, classes, and style are stripped out
            - Just bare minimum HTML tags and attributes
            - extension modifications included
    */
    "html_simple": false,

    /*
        Sets how image paths are handled.
        Setting is a string value: (absolute | relative | base64 | none)
            absolute: converts relative local paths to absolute
            relative: converts relative local paths to a path relative to the
                      HTML output
            base64: coverts the local file to base64 and embeds it in the HTML
            none: does nothing
    */
    "image_path_conversion": "absolute",

    /*
        Sets how file paths are handled.
        Setting is a string value: (absolute | relative | none)
            absolute: converts relative local paths to absolute
            relative: converts relative local paths to a path relative to the
                      HTML output
            none: does nothing
    */
    "file_path_conversions": "absolute",

    /*
        Sets how multimarkdown critic marks are handled.
        Setting is a string value: (accept | reject | none)
            accept: Accepts the proposed inserts and deletions (comments etc. are discarded)
            reject: Rejects the proposed inserts and deletions (comments etc. are discarded)
            none: does nothing
    */
    "strip_critic_marks": "none",

    /*
        Sets whether highlight JS will auto-guess raw block's syntax.
        Alternative is to to only highlight blocks where a language has
        been defined.

        Default is True (guess).

        If you manually set codehilite as an included extension in "enabled_extensions",
        your settings will override this one.  To configure language guessing manually:
            "enabled_extensions": [
                "codehilite(guess_lang=False)" // <-Turn off language guessing
            ]
    */
    "guess_language": true,

    /*
        Strips the YAML front matter header and converts title to a heading
    */
    "strip_yaml_front_matter": false,

    /* do we show the panel when build with CMD+B */
    "show_panel_on_build": true,

    /* do we include the CSS when outputting HTML into a new sublime view ? */
    "embed_css_for_sublime_output": true
}