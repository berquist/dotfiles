#!/usr/bin/env zsh

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="yyyy-mm-dd"

### Added by Zinit's installer
. "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit installer's chunk

zinit snippet OMZL::clipboard.zsh
zinit snippet OMZL::compfix.zsh
zinit snippet OMZL::completion.zsh
zinit snippet OMZL::correction.zsh
zinit snippet OMZL::diagnostics.zsh
zinit snippet OMZL::directories.zsh
zinit snippet OMZL::functions.zsh
zinit snippet OMZL::git.zsh
zinit snippet OMZL::history.zsh
zinit snippet OMZL::key-bindings.zsh
zinit snippet OMZL::misc.zsh
zinit snippet OMZL::spectrum.zsh
zinit snippet OMZL::termsupport.zsh
zinit snippet OMZL::theme-and-appearance.zsh

autoload -U compaudit compinit

# Figure out the SHORT hostname
if [[ "$OSTYPE" = darwin* ]]; then
  # macOS's $HOST changes with dhcp, etc. Use ComputerName if possible.
  SHORT_HOST=$(scutil --get ComputerName 2>/dev/null) || SHORT_HOST=${HOST/.*/}
else
  SHORT_HOST=${HOST/.*/}
fi

# Save the location of the current completion dump file.
if [ -z "$ZSH_COMPDUMP" ]; then
  ZSH_COMPDUMP="${ZDOTDIR:-${HOME}}/.zcompdump-${SHORT_HOST}-${ZSH_VERSION}"
fi

# Construct zcompdump OMZ metadata
zcompdump_fpath="#omz fpath: $fpath"

# Delete the zcompdump file if OMZ zcompdump metadata changed
if ! command grep -q -Fx "$zcompdump_fpath" "$ZSH_COMPDUMP" 2>/dev/null; then
  command rm -f "$ZSH_COMPDUMP"
  zcompdump_refresh=1
fi

if [[ $ZSH_DISABLE_COMPFIX != true ]]; then
  # If completion insecurities exist, warn the user
  handle_completion_insecurities
  # Load only from secure directories
  compinit -i -C -d "${ZSH_COMPDUMP}"
else
  # If the user wants it, load from all found directories
  compinit -u -C -d "${ZSH_COMPDUMP}"
fi

# Append zcompdump metadata if missing
if (( $zcompdump_refresh )); then
  # Use `tee` in case the $ZSH_COMPDUMP filename is invalid, to silence the error
  # See https://github.com/ohmyzsh/ohmyzsh/commit/dd1a7269#commitcomment-39003489
  tee -a "$ZSH_COMPDUMP" &>/dev/null <<EOF

$zcompdump_fpath
EOF
fi

unset zcompdump_fpath zcompdump_refresh

zinit light romkatv/zsh-prompt-benchmark
zinit ice depth=1; zinit light sobolevn/wakatime-zsh-plugin
zinit snippet OMZP::sprunge
# Rust programming language
zinit ice as"completion" wait'!2' silent
zinit snippet OMZ::plugins/cargo/_cargo
zinit ice as"completion" wait'!2' silent
zinit snippet OMZ::plugins/rust/_rust
zinit ice as"completion" wait'!2' silent
zinit snippet ~/dotfiles/zfunc/_rustup
# Python programming language
zinit ice as"completion" wait'!2' silent
zinit snippet ~/dotfiles/zfunc/_poetry

# Lines configured by zsh-newuser-install
setopt appendhistory beep nomatch
unsetopt autocd extendedglob notify
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename "${HOME}/.zshrc"
autoload -Uz compinit
compinit
# End of lines added by compinstall

. "${HOME}"/dotfiles/history.zsh
. "${HOME}"/dotfiles/interactive_exports.bash
. "${HOME}"/dotfiles/aliases.bash 
. "${HOME}"/dotfiles/functions.bash
. "${HOME}"/dotfiles/slurm.bash

{%@@ if profile == "osmium" @@%}
# re-export
export QCPROGS="${HOME}/data/opt/apps"
export apps="${QCPROGS}"

. /usr/bin/virtualenvwrapper.sh

source /usr/share/lmod/lmod/init/zsh
module use "${HOME}/modules/osmium"
{%@@ elif profile == "sodium.local" @@%}
## #####################
## ## Setting Mac OS X
## ## Terminal.app name.
## ## This code goes to
## ## all your ~/.bashrc or
## ## ~/.bash_profile files.
## ## Now you can jump from
## ## machine to machine and
## ## never get lost.
## #####################

## -----------------------------
## -- this runs when you get new
## -- you get new interactive bash
## -- shell - the condition is needed
## -- so it will not interrupt the scp command

if [[ "$-" =~ "i" ]]; then
    echo -n -e "\033]0;${USER}@${HOSTNAME%%.*}\007";
fi;

## -----------------------------
## -- this runs when you logoff
## -- from a ssh session - it puts
## -- back previous terminal name;

function ssh() {
    /usr/bin/ssh "$@";
    echo -n -e "\033]0;${USER}@${HOSTNAME%%.*}\007";
}

. ~/dotfiles/aliases_macos.bash

# export MATLAB_ROOT='/Applications/MATLAB_R2012a.app'
# export MATLAB_BIN="${MATLAB_ROOT}/bin"
# export PATH="${PATH}:${MATLAB_BIN}"

. /usr/local/opt/lmod/init/zsh
module use "${HOME}/modules/sodium"

module load python/psi4conda
{%@@ endif @@%}

eval "$(direnv hook $(basename $SHELL))"
