# -*- mode: gitconfig; -*-
# For useful information about most of these options, see
# https://git-scm.com/docs/git-config

# Does this file require tabs or spaces? Answer: doesn't matter, but Emacs
# seems to want to use tabs:
#   ;; .gitconfig is indented with tabs only
#  (conf-mode-initialize "#" gitconfig-mode-font-lock-keywords)
#  (setq indent-tabs-mode t)
# https://stackoverflow.com/q/52388331

[user]
	name = Eric Berquist
	email = eric.berquist@gmail.com
	# GPG
	signingKey = AAD43B70A5049675CFC8B101BAFD205D5FA2B329
	# SSH
	# signingKey = /home/eric/.ssh/id_rsa

[core]
	# https://askubuntu.com/a/866376
	editor = emacsclient -t -a=\\\"\\\"
	excludesfile = ~/.gitignore
	autocrlf = input
	safecrlf = warn

[blame]
	coloring = repeatedLines
	# ignoreRevsFile = .git-blame-ignore-revs
	markIgnoredLines = true
	markUnblamableLines = true

[branch]
	sort = -committerdate

# Available colors are enumerated in
# http://stackoverflow.com/questions/15458237/git-pretty-format-colors
[color]
	# `ui` probably sets all of these to auto, but meh
	branch = auto
	diff = auto
	grep = auto
	interactive = auto
	pager = true
	showBranch = auto
	status = auto
	ui = auto

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	whitespace = red blink

[color "status"]
	branch = blue
	nobranch = normal blink
	untracked = cyan
	unmerged = yellow

[column]
	ui = auto

[commit]
	gpgsign = true
	verbose = true

[diff]
	algorithm = histogram
	colorMoved = default
	# mnemonicPrefix = true
	# https://stackoverflow.com/q/6764953/
	noprefix = true
	renames = copy
	tool = difftastic

[difftool]
	prompt = false

[difftool "difftastic"]
	cmd = difft "$LOCAL" "$REMOTE"

[difftool.latex]
	# Needs the `ldiff` script.
	cmd = ldiff "$LOCAL" "$REMOTE" "$MERGED"

[fetch]
	all = true
	prune = true
	pruneTags = true

# Where did this come from?
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[init]
	defaultBranch = main

[github]
	user = berquist

[gpg]
	format = openpgp

[gpg "ssh"]
	allowedSignersFile = /home/eric/.config/git/allowed_signers

[help]
	autocorrect = prompt

[log]
	date = "format:%F %r (%a, %d %b %Y %T %z)"

[merge]
	conflictstyle = zdiff3
	verbosity = 3

[pager]
	difftool = true

[pull]
	ff = only

[push]
	autoSetupRemote = true
	default = simple
	followTags = true

[pretty]
	# This is comparable to `--pretty=oneline`, but includes the extra
	# (relative) date and author information at the end.
	olra = %C(auto)%h%C(reset) -%C(auto)%d%C(reset) %s %C(green)(%cr)%C(reset) %C(blue)<%an>%C(reset)
	# The above but with full hash
	olfra = %C(auto)%H%C(reset) -%C(auto)%d%C(reset) %s %C(green)(%cr)%C(reset) %C(blue)<%an>%C(reset)

[rebase]
	# autoSquash = true
	autoStash = true
	missingCommitsCheck = warn
	rebaseMerges = true
	updateRefs = true

[rerere]
	autoupdate = true
	enabled = true

[stash]
	showPatch = true
	# default, but for clarity...
	showStat = true

[tag]
	forceSignAnnotated = true
	gpgsign = true
	sort = version:refname

[alias]
	# git git git git git git git git git ...
	git = !exec git
	branches = branch -a -v
	remotes = remote -v
	st = status -sb
	# These do the same thing (--cached and --staged, that is).
	dc = diff --cached
	ds = diff --staged

	l = log --graph --abbrev-commit
	# This is comparable to `log --graph --oneline`, but includes the extra
	# (relative) date and author information at the end.
	lg = log --graph --pretty=olra

	# Stop accidentally deleting untracked files.
	# Always recurse into subdirectories.
	c = clean -X -d

	# Continue listing the history of a file beyond renames (works only for a
	# single file).
	when = !git log --follow -- "$2"

	# http://stackoverflow.com/questions/6017987/how-can-i-list-all-the-deleted-files-in-a-git-repository
	# Show the files that were deleted for each commit.
	show-deleted = log --diff-filter=D --summary
	# Show just the names of all deleted files over the entire repository
	# history.
	show-all-deleted = !git log --all --pretty=format: --name-only --diff-filter=D | sort -u

	## Let's do some destructive stuff.
	# Add more things to the last commit on the current head, with the
	# ability to rewrite the commit message.
	amend = commit --amend -c HEAD
	# Nicely go back a commit.
	undo = reset --soft HEAD~1

	## Useful for LaTeX.
	## Taken from https://wiki.math.cmu.edu/iki/wiki/tips/20140301-git-latexdiff.html
	# use like: git wdiff HEAD~1
	wdiff = diff --color-words --ignore-all-space
	# use like: git ldiff HEAD~1
	ldiff = difftool -y -t latex

	# Perform a "character" diff.
	# http://stackoverflow.com/questions/1721738/using-diff-or-anything-else-to-get-character-level-diff-between-text-files
	# Changing --word-diff to plain helps to make things more obvious.
	cdiff = diff --color-words --ignore-all-space --word-diff=plain --word-diff-regex=.

	# Difftastic (https://difftastic.wilfred.me.uk/git.html)
	dft = difftool
	dlog = "!f() { GIT_EXTERNAL_DIFF=difft git log -p --ext-diff; }; f"

	# Typos
	checkotu = checkout

# [interactive]
# 	diffFilter = delta --color-only

# [delta]
# 	line-numbers = true
# 	navigate = true
# 	syntax-theme = Dracula
[credential "https://gitlab.com"]
	helper =
	helper = !/usr/bin/glab auth git-credential
