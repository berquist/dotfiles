# For useful information about most of these options, see
# https://git-scm.com/docs/git-config

# Does this file require tabs or spaces? Answer: doesn't matter, but Emacs
# seems to want to use tabs:
#   ;; .gitconfig is indented with tabs only
#  (conf-mode-initialize "#" gitconfig-mode-font-lock-keywords)
#  (setq indent-tabs-mode t)
# https://stackoverflow.com/q/52388331

[user]
	name = Eric Berquist
	email = eric.berquist@gmail.com
	signingkey = AAD43B70A5049675CFC8B101BAFD205D5FA2B329

[core]
	# https://askubuntu.com/a/866376
	editor = emacsclient -t -a=\\\"\\\"
	autocrlf = input
	safecrlf = warn

# Available colors are enumerated in
# http://stackoverflow.com/questions/15458237/git-pretty-format-colors
[color]
	# `ui` probably sets all of these to auto, but meh
	branch = auto
	diff = auto
	grep = auto
	interactive = auto
	pager = true
	showBranch = auto
	status = auto
	ui = auto

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	whitespace = red blink

[color "status"]
	branch = blue
	nobranch = normal blink
	untracked = cyan
	unmerged = yellow

[pull]
	ff = only

[push]
	default = simple

[merge]
	conflictstyle = diff3
	verbosity = 3

[alias]
	# git git git git git git git git git ...
	git = !exec git
	branches = branch -a -v
	ferch = fetch
	commit = commit --verbose
	remotes = remote -v
	st = status -sb
	# These do the same thing (--cached and --staged, that is).
	dc = diff --cached
	ds = diff --staged

	# http://stackoverflow.com/questions/6017987/how-can-i-list-all-the-deleted-files-in-a-git-repository
	show-deleted = log --diff-filter=D --summary
	show-deleted2 = !git log --all --pretty=format: --name-only --diff-filter=D | sort -u
	l = log --graph --pretty=fuller --abbrev-commit --date=format:'%F %r (%a, %d %b %Y %T %z)'
	# gitk style, very pretty mhmmmm
	lg = !git l --pretty=format:'%Cred%h%Creset %G? -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue) <%an>%Creset'

	when = !git log --follow -- "$2"

	## Let's do some destructive stuff.
	# Add more things to the last commit on the current head, with the
	# ability to rewrite the commit message.
	amend = commit --amend -c HEAD
	# Nicely go back a commit.
	undo = reset --soft HEAD~1

	## Useful for LaTeX.
	## Taken from https://wiki.math.cmu.edu/iki/wiki/tips/20140301-git-latexdiff.html
	# use like: git wdiff HEAD~1
	wdiff = diff --color-words --ignore-all-space
	# use like: git ldiff HEAD~1
	ldiff = difftool -y -t latex

	# Perform a "character" diff.
	# http://stackoverflow.com/questions/1721738/using-diff-or-anything-else-to-get-character-level-diff-between-text-files
	# Changing --word-diff to plain helps to make things more obvious.
	cdiff = diff --color-words --ignore-all-space --word-diff=plain --word-diff-regex=.

[diff]
	# TODO Why this number?
	renameLimit = 1011

[difftool.latex]
	# Needs the `ldiff` script.
	cmd = ldiff "$LOCAL" "$REMOTE" "$MERGED"

# Where did this come from?
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[github]
	user = berquist
[init]
	defaultBranch = main
