#!/usr/bin/env zsh

source "${HOME}"/dotfiles/path_exports.bash

# `wakatime-cli` is the outdated Python package, `wakatime` is the current Go
# package.
{%@@ if profile == "sodium.local" @@%}
# ...unless you're using Homebrew, where they've renamed the command back to
# the old one.
export ZSH_WAKATIME_BIN=/usr/local/bin/wakatime-cli
{%@@ else @@%}
export ZSH_WAKATIME_BIN=$(command -v wakatime)
{%@@ endif @@%}

# Put this early on, so that additions to $PATH take less precedence.
{%@@ if profile == "osmium" @@%}
# export ANACONDA_HOME="/home/eric/.conda"
# TODO blergh
export ANACONDA_HOME="/home/eric/.pyenv/versions/miniconda3-4.7.12"

export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
# export VIRTUALENVWRAPPER_VIRTUALENV=/usr/bin/virtualenv
export WORKON_HOME=$HOME/data/virtualenvs
{%@@ endif @@%}

# All this stuff is here and not in .zshrc as is usually recommended so that
# *all* shells have access, not just interactive ones.

# [[ -d "${HOME}/.poetry/bin" ]] && export PATH="${HOME}/.poetry/bin:${PATH}"
[[ -d "${HOME}/.pyenv/bin" ]] && export PATH="${HOME}/.pyenv/bin:${PATH}"
# These are...slow.
if command -v pyenv >/dev/null 2>&1; then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi
if command -v pyenv-virtualenv-init >/dev/null 2>&1; then eval "$(pyenv virtualenv-init -)"; fi

# Rust
[[ -d "${HOME}/.cargo/bin" ]] && export PATH="${HOME}/.cargo/bin:${PATH}"

# Nim
[[ -d "${HOME}/.nimble/bin" ]] && export PATH="${HOME}/.nimble/bin:${PATH}"

# Spack
{%@@ if profile == "osmium" @@%}
. "${HOME}"/data/spack/share/spack/setup-env.sh
{%@@ elif profile == "pop-os" @@%}
. "${HOME}"/repositories/spack/share/spack/setup-env.sh
{%@@ endif @@%}
