* Straight and other prerequisites

#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-

(setq straight-use-package-by-default t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq use-package-always-defer t
      use-package-verbose t)
(straight-use-package 'use-package)
#+END_SRC

Fundamental third-party packages that don't go anywhere else.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 12800000)
(setq read-process-output-max (* 1024 1024 5))  ; 5 MB

;; Load this before any other third-party packages.
(use-package no-littering
  :demand t)

(use-package dash-functional
  :demand t)

;; Set the path properly. Don't have a conditional on using the window system
;; in order to circumvent
;; https://emacs.stackexchange.com/questions/27918/why-is-exec-path-different-in-emacsclient-emacsserver-than-in-emacs.
(use-package exec-path-from-shell
  :init
  (exec-path-from-shell-initialize))
;; Starting the GUI doesn't know anything about the Keychain:
;; https://emacs.stackexchange.com/questions/41343/magit-asks-for-passphrase-for-ssh-key-every-time
;; I'm not sure that all of these are necessary anymore, considering that most
;; things should be in the correct dotfile.
(setq ejb/desired-envvars
      '("ANACONDA_HOME"
        "GIT_AUTHOR_EMAIL"
        "GIT_COMMITTER_EMAIL"
        "SSH_AGENT_PID"
        "SSH_AUTH_SOCK"
        "WORKON_HOME"))
(when (display-graphic-p)
  (-each ejb/desired-envvars (lambda (envvar) (exec-path-from-shell-copy-env envvar))))
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp
(defun ejb/insert-date ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

(defun ejb/comparator (e1 e2 ordering)
  "Compare two elements based on a partial ordering. Elements
that are not part of the ordering are stably kept at the end."
  (let ((contains-e1 (-contains-p ordering e1))
        (contains-e2 (-contains-p ordering e2)))
    (cond
     ((and (not contains-e1) (not contains-e2)) nil)
     ((and (not contains-e1) contains-e2) nil)
     ((and contains-e1 (not contains-e2)) t)
     ((< (-elem-index e1 ordering) (-elem-index e2 ordering)) t)
     (t nil))))
#+END_SRC

* M-x customize

Only package-selected-packages and custom-safe-themes should go in here.
- https://www.reddit.com/r/emacs/comments/4x655n/packageselectedpackages_always_appear_after/
- https://www.reddit.com/r/emacs/comments/53zpv9/how_do_i_get_emacs_to_stop_adding_custom_fields/

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
;; Intentionally save to a customization file that is not loaded by Emacs and
;; is ignored by Git. All permanent customization should be in this file, but
;; not sending to /dev/zero allows temporary customization via `customize`
;; then cherry-picking from `custom.el` into here.
#+END_SRC

* General configuration

What's the difference between setq and setq-default? See here: http://stackoverflow.com/questions/18172728/the-difference-between-setq-and-setq-default-in-emacs-lisp

#+begin_src emacs-lisp
(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(tooltip-mode -1)
;; Sometimes I get lazy...
(when window-system (menu-bar-mode 1))

(setq inhibit-splash-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t
      initial-scratch-message nil)

(load "~/dotfiles/dotfiles-private/private.el")
(setq-default user-full-name "Eric J. Berquist")
(setq-default user-mail-address "eric.berquist@gmail.com")

;; took some tricks from http://www.aaronbedra.com/emacs.d/

;; http://stackoverflow.com/questions/3281581/how-to-word-wrap-in-emacs
;; http://stackoverflow.com/questions/12989072/showing-continuation-lines-in-emacs-in-a-text-terminal
(setq-default transient-mark-mode t)
(setq-default visual-line-mode t)
(setq-default truncate-lines nil)
(setq-default line-number-mode t)
(setq-default column-number-mode t)
(setq-default cursor-type 'box)

;; Enable maximum syntax highlighting wherever possible.
(setq-default global-font-lock-mode t)
(setq-default font-lock-maximum-decoration t)

;; Bells are annoying, stop ringing!
(setq-default visible-bell nil)
(setq-default audible-bell nil)
(setq-default ring-bell-function 'ignore)

;; 'y' is two characters less than 'yes'.
;; 'defalias' or 'fset'?
(defalias 'yes-or-no-p 'y-or-n-p)

;; This is really annoying, yes I want to quit
(setq confirm-kill-processes nil)

;; death to tabs, tabs are evil
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; Line length when executing `fill-paragraph`. Default is 70. See
;; https://www.emacswiki.org/emacs/FillParagraph and
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Commands.html.
(setq-default fill-column 78)
;; (setq-default sentence-end-double-space nil)

;; Automatically reload buffers when their files change, and make sure
;; to check on the version control status every now and then.
(global-auto-revert-mode t)
;; Turns out this is *extremely* irritating and moves the mark every time the
;; buffer refreshes!
;; (setq-default auto-revert-check-vc-info t)

;; Allow making whole regions uppercase or lowercase.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+end_src

* Encoding: Unicode/UTF-8

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

* Backups/autosaving

#+begin_src emacs-lisp
;; let's live on the edge and disable backup and autosave
(setq-default backup-inhibited t)
(setq-default auto-save-default nil)
(setq-default create-lockfiles nil)
(setq-default make-backup-files nil)
#+end_src

* Disable popup boxes

#+begin_src emacs-lisp
(defadvice yes-or-no-p (around prevent-dialog activate)
  "Prevent yes-or-no-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice y-or-n-p (around prevent-dialog-yorn activate)
  "Prevent y-or-n-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
#+end_src

* Key bindings

- To view all current keybindings, =C-h b=.
- To view all personal keybindings, =M-x describe-personal-keybindings=.
- Used to have stuff for ='comment-or-uncomment-region=, ='comment-region=, and ='uncomment-region= here, but =M-;= calls ='comment-dwim=, which is what you really want.

#+begin_src emacs-lisp
(bind-key (kbd "M-/") 'hippie-expand)
(bind-key (kbd "C-x C-b") 'switch-to-buffer)
(bind-key (kbd "C-x b") 'ibuffer)
(bind-key (kbd "C-c b") 'switch-to-previous-buffer)
(bind-key (kbd "C-x C-9") 'text-scale-decrease)
(bind-key (kbd "C-x C-0") 'text-scale-increase)
(bind-key (kbd "C-x C-h") 'replace-string)
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package which-key
  ;; why doesn't this work
  ;; :delight
  :config
  (setq which-key-lighter "")
  :init
  (which-key-mode))
#+END_SRC

* dir-locals

Taken from https://emacs.stackexchange.com/a/13096/10950

#+BEGIN_SRC emacs-lisp
(defun my-reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun my-reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir))
        (my-reload-dir-locals-for-current-buffer)))))

;; (add-hook 'emacs-lisp-mode-hook
;;           (defun enable-autoreload-for-dir-locals ()
;;             (when (and (buffer-file-name)
;;                        (equal dir-locals-file
;;                               (file-name-nondirectory (buffer-file-name))))
;;               (add-hook (make-variable-buffer-local 'after-save-hook)
;;                         'my-reload-dir-locals-for-all-buffer-in-this-directory))))
#+END_SRC

* Snippets

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  ;; TODO
  ;; :bind (:map yas-minor-mode-map
  ;;             ("C-M-/" . yas-expand)
  ;;             ("TAB" . nil))
  :init
  (yas-global-mode 1))
(use-package yasnippet-snippets)
#+END_SRC

* Parens/whitespace/indentation

#+begin_src emacs-lisp
(electric-pair-mode)
(show-paren-mode)
(setq show-paren-delay 0.0)

(use-package whitespace
  :bind (("C-c t" . whitespace-mode))
  :mode (("\\.csv\\'" . whitespace-mode)
         ("\\.tab\\'" . whitespace-mode)
         ("\\.tsv\\'" . whitespace-mode))
  :config
  ;; use the fill-column value
  (setq whitespace-line-column nil)
  (setq whitespace-display-mappings
   '((space-mark   ?\    [?\u00B7]     [?.])                    ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
     ;; (space-mark ?\s [183] [46])
     ;; (space-mark 32 [32] [46]) ; normal space, display nothing
     (space-mark   ?\xA0 [?\u00A4]     [?_])                    ; hard space: currency sign
     ;; (newline-mark ?\n [9166 10] [36 10])                    ; 10 LINE FEED, 9166 RETURN SYMBOL 「⏎」, 36 DOLLAR SIGN 「$」
     (newline-mark ?\n   [?\u21B5 ?\n] [172 10] [?\u00AF ?\n])  ; eol: downwards arrow with corner leftwards, ..., macron
     (tab-mark     ?\t   [9655 9]      [92 9] ))                ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」, 92 9 CHARACTER TABULATION 「\t」
   whitespace-style
   '(face
     trailing
     tabs
     ;; spaces
     ;; lines
     ;; lines-tail
     newline
     empty
     ;; indentation::tab
     ;; indentation::space
     ;; indentation
     ;; big-indent
     space-after-tab::tab
     ;; space-after-tab::space
     ;; space-after-tab
     space-before-tab::tab
     ;; space-before-tab::space
     space-before-tab
     space-mark
     tab-mark
     newline-mark
     ))
  ;; By default, `space-before-tab` considers zero or more spaces before a
  ;; tab, but `space-after-tab` only considers `tab-width` or more
  ;; spaces. Since my goal is not to look for indentation problems, but find
  ;; _any_ mixing, consider any number of spaces after a tab. Additionally,
  ;; apply font locking to the spaces, not the tab.
  (setq whitespace-space-after-tab-regexp '("\011+\\(\\( \\{0,\\}\\)+\\)" . "\\(\011+\\) \\{0,\\}"))
  :init
  (setq global-whitespace-mode nil))

(use-package dtrt-indent
  :init
  (dtrt-indent-mode 1))

(use-package unfill
  :bind (("C-M-q" . unfill-paragraph)))

;; Always place a newline at the end of files, like nano does by
;; default.
(setq require-final-newline t)
#+end_src

* Theming and window shaping

** mode line

#+BEGIN_SRC emacs-lisp
(use-package delight)
(delight 'emacs-lisp-mode "Elisp" :major)
#+END_SRC

** Themes

#+begin_src emacs-lisp
(use-package base16-theme)
;; (use-package base16-eva-theme
;;   :demand t
;;   :straight (:host github
;;              :repo "kjakapat/eva-theme"
;;              :files ("emacs/build/*.el"))
;;   :config
;;   (add-to-list 'custom-theme-load-path
;;                (concat straight-base-dir
;;                        "straight/build/base16-eva-theme/")))
;;   ;; (load-theme 'base16-eva t))
(use-package dracula-theme)
(use-package gotham-theme)
(use-package plan9-theme)
(use-package punpun-theme) ; (punpun-light, punpun-dark)
(use-package rebecca-theme)
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'wombat2 t)
(use-package rainbow-mode)
#+end_src

** Windows

TODO set fallback fonts, see http://ergoemacs.org/emacs/emacs_list_and_set_font.html

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Panic Sans-11"))
;; https://emacs.stackexchange.com/q/45895
(set-face-attribute 'fixed-pitch nil :family "Fira Mono")

(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))
(setq-default indicate-buffer-boundaries 'right)

(use-package default-text-scale
  :demand t
  :hook (after-init . default-text-scale-mode))
#+end_src

* Narrowing, searching, and projects

#+BEGIN_SRC emacs-lisp
(setq completions-format 'vertical)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :disabled t
  :delight
  :demand t
  ;; :hook (after-init . ivy-mode)
  :bind
  (:map ivy-minibuffer-map
        ;; This could be swiper-map, but I want it everywhere narrowing is
        ;; used.
        ("C-r" . ivy-previous-line-or-history)
        ("<return>" . ivy-alt-done))
  :config
  (setq ivy-action-wrap t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-magic-tilde nil)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap t)
  :init
  (ivy-mode))
(use-package counsel
  :disabled t
  :after ivy
  :delight
  :demand t
  ;; :hook (after-init . counsel-mode)
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file))
  :init
  (counsel-mode)
  ;; Don't force matches to start at the beginning.
  (setq ivy-initial-inputs-alist nil))
(use-package swiper
  :disabled t
  :after ivy
  ;; :hook (after-init . swiper-mode)
  :bind (("C-s" . swiper-isearch)
         ("C-r" . swiper-isearch-backward)))
(use-package selectrum
  :hook (after-init . selectrum-mode))
(use-package ctrlf
  :demand t
  :config
  ;; prefer fuzzy over literal searching
  (setq ctrlf-mode-bindings
        '(([remap isearch-forward] . ctrlf-forward-fuzzy)
          ([remap isearch-backward] . ctrlf-backward-fuzzy)
          ([remap isearch-forward-regexp] . ctrlf-forward-fuzzy-regexp)
          ([remap isearch-backward-regexp] . ctrlf-backward-fuzzy-regexp)))
  (ctrlf-mode))
(use-package prescient
  :hook (after-init . prescient-persist-mode))
(use-package selectrum-prescient
  :hook (after-init . selectrum-prescient-mode))
(use-package ivy-prescient
  :disabled t
  :hook (after-init . ivy-prescient-mode))
#+END_SRC

Some of my computers have [[https://github.com/BurntSushi/ripgrep][ripgrep]] installed.
- For =ripgrep=, which has the traditional =grep= interface, use =M-x ripgrep-regexp= to activate.

#+BEGIN_SRC emacs-lisp
;; This package is needed for projectile-ripgrep to work. Don't disable it.
(use-package ripgrep
  :config
  (setq ripgrep-arguments '("--hidden")))
(use-package deadgrep
  ;; <f5> is suggested, but that is inconvenient on my keyboards...
  :bind (("C-c g" . deadgrep)))
(use-package rg
  :config
  (setq rg-command-line-flags '("--hidden")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind ("C-c p" . projectile-command-map)
  :config
  (setq projectile-completion-system 'ivy)
  (setq projectile-enable-caching t)
  (setq projectile-indexing-method 'hybrid)
  (setq projectile-project-search-path
        '("~/development" "~/repositories"))
  (setq projectile-require-project-root t)
  (setq projectile-sort-order 'access-time)
  (setq projectile-project-root-files-top-down-recurring
        (append
         '("compile_commands.json" ".ccls")
         projectile-project-root-files-top-down-recurring))
  (setq projectile-globally-ignored-directories
        (append
         '("build" "CMakeFiles" ".ccls-cache")
         projectile-globally-ignored-directories))
  (setq projectile-globally-ignored-files
        (append
         '("cmake_install.cmake")
         projectile-globally-ignored-files))
  :init
  (projectile-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package direnv
  :init
  (direnv-mode))
#+END_SRC

* TRAMP

- Only set =tramp-verbose= while debugging, otherwise you'll think TRAMP is slow for the wrong reason.

Links:
- https://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html
- https://www.emacswiki.org/emacs/TrampMode

#+BEGIN_SRC emacs-lisp
;; Setting this to true would be ideal (so that a reformatter can be applied
;; remotely), but it causes saving to hang.
(setq auto-revert-remote-files nil)
(setq tramp-default-method "ssh")
;; (setq tramp-verbose 8)
(setq vc-handled-backends (delq 'Git vc-handled-backends))
(require 'tramp)
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
(use-package counsel-tramp)
#+END_SRC

* Spelling

- ispell and flyspell are intentionally intermingled
- TODO ensure backend is =aspell=?

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :config
  (setq langtool-default-language "en-US")
  (setq langtool-mother-tongue "en")
  ;; TODO update
  (if (eq system-type 'darwin)
      (setq langtool-language-tool-server-jar "/usr/local/Cellar/languagetool/4.7/libexec/languagetool-server.jar"
            langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.7/libexec/languagetool-commandline.jar"))
  ;; Arch Linux
  (if (eq system-type 'gnu/linux)
      (setq ; langtool-language-tool-server-jar "/usr/share/java/languagetool/languagetool-server.jar"
            langtool-language-tool-jar "/usr/share/java/languagetool/languagetool-commandline.jar"
            langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*")))

;; built-in
(use-package flyspell
  :hook ((text-mode . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :bind (("C-'" . ispell-word)
         ("C-M-'" . flyspell-buffer))
  :config
  (setq ispell-silently-savep t)
  (setq flyspell-issue-welcome-flag nil)
  (setq flyspell-mode-line-string " FlyS"))
#+end_src

** word count

#+BEGIN_SRC emacs-lisp
(use-package wc-mode
  :bind (("C-c w" . wc-mode)))
#+END_SRC

* Completion and language servers

#+BEGIN_SRC emacs-lisp
(use-package company
  :hook (after-init . global-company-mode)
  :bind
  ("M-]" . company-complete)
  (:map company-active-map
         ("M-/" . company-other-backend)
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous))
  :config
  ;; These are company backends I know I'll never use, so remove them if
  ;; present.
  (setq ejb/company-backends-to-remove
        '(company-bbdb
          company-eclim
          company-xcode
          company-oddmuse))
  ;; Partial ordering of (future) backends from most to least important.
  ;;
  ;; - For Python, prefer the language server over `anaconda-mode' if
  ;;   possible.
  ;;
  ;; - For Nim, nimsuggest seems to give much better results than nimlsp.
  (setq ejb/company-ordering
        '(company-nimsuggest
          company-capf
          company-anaconda))
  (setq company-backends
        (seq-filter
         (lambda (backend)
           (not (member backend ejb/company-backends-to-remove)))
         company-backends))
  (setq company-dabbrev-downcase nil)
  (setq company-idle-delay 10)
  (setq company-minimum-prefix-length 0)
  (setq company-search-regexp-function #'company-search-words-regexp)
  (setq company-selection-wrap-around t)
  (setq company-tooltip-align-annotations t)
  (setq company-transformers '(company-sort-by-backend-importance))
  :init
  (defun ejb/fix-company-ordering ()
    (with-eval-after-load 'company
      (setq company-backends
            (-sort '(lambda (e1 e2)
                      (funcall (-rpartial 'ejb/comparator ejb/company-ordering) e1 e2))
                   company-backends)))))

(use-package company-prescient
  :hook (after-init . company-prescient-mode))

(use-package lsp-mode
  :commands lsp
  :hook ((fortran-mode f90-mode sh-mode) . lsp-deferred)
  :config
  (setq lsp-auto-guess-root t)
  (setq lsp-enable-snippet nil)
  (setq lsp-prefer-capf t)
  (setq lsp-prefer-flymake nil)
  (setq lsp-rust-clippy-preference "on"))

(use-package lsp-ui
  :disabled t
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-include-signature t)
  (setq lsp-ui-flycheck-enable t)
  (setq lsp-ui-peek-always-show t))
#+END_SRC

* Debuggers

#+BEGIN_SRC emacs-lisp
(use-package realgud)
(use-package realgud-ipdb)
(use-package dap-mode
  :commands (dap-debug dap-debug-edit-template))
#+END_SRC

* Flycheck

** General

TODO add LaTex

#+begin_src emacs-lisp
(use-package flycheck
  :bind (("C-c f" . flycheck-mode))
  :config
  (setq flycheck-check-syntax-automatically '(mode-enabled save))
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (setq flycheck-gcc-openmp t)
  (setq flycheck-markdown-mdl-style "~/.mdlrc")
  ;; This interferes with project-specific configurations.
  ;; (setq flycheck-pylintrc "~/.pylintrc")
  :init
  (global-flycheck-mode))
#+end_src

** Shell

For this to work, =checkbashisms= needs to be available on the =$PATH=:

#+begin_src sh
yaourt -S checkbashisms # Arch Linux, from AUR
brew install checkbashisms # Mac OS X, from Homebrew
sudo apt-get install devscripts # Debian/Ubuntu, official
sudo yum install rpmdevtools # Red Hat/CentOS
sudo pkg install checkbashisms # FreeBSD
#+end_src

#+begin_src emacs-lisp
(use-package flycheck-checkbashisms
  ;; We assume that shellcheck can handle this.
  :disabled t
  :hook (flycheck-mode . flycheck-checkbashisms-setup)
  :config
  ;; Check 'echo -n' usage
  (setq flycheck-checkbashisms-newline t)
  (setq flycheck-checkbashisms-posix t))
#+end_src

** Prose

Integration with [[https://github.com/errata-ai/vale][vale]].

#+BEGIN_SRC emacs-lisp
(use-package flycheck-vale
  :hook (flycheck-mode . flycheck-vale-setup))
#+END_SRC

* Git/version control

** General

#+BEGIN_SRC emacs-lisp
;; Even though VC systems (at least git) commit the symbolic link pointer
;; itself, and not the file it's pointing to, I want to edit the file.
(setq vc-follow-symlinks t)
#+END_SRC

** Git

- [[https://magit.vc/manual/magit/Getting-started.html][magit: Getting Started]]
- https://www.youtube.com/watch?v=7ywEgcbaiys&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&index=18

#+BEGIN_SRC emacs-lisp
(use-package git-commit
  :init
  (global-git-commit-mode))
(use-package gitattributes-mode)
(use-package gitconfig-mode)
(use-package gitignore-mode)
(use-package magit
  :bind (("C-x g" . magit-status)))
(use-package magit-svn
  :disabled t
  :hook magit-mode)
(use-package git-timemachine)
#+END_SRC

** GitHub and other providers

#+BEGIN_SRC emacs-lisp
(use-package forge
  :after magit)
(use-package github-review)
#+END_SRC

* Pandoc

#+begin_src emacs-lisp
(use-package pandoc-mode
  :hook (pandoc-mode . pandoc-load-default-settings))
#+end_src

* Org

#+begin_src emacs-lisp
;; http://orgmode.org/manual/Code-evaluation-security.html
(defun my-org-confirm-babel-evaluate (lang body)
  (not (equal lang "latex")))

(use-package org
  ;; Give up on trying to use the latest one, which doesn't load properly with
  ;; straight.
  :straight (org :type built-in)
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :config
  (setq org-adapt-indentation nil)
  (setq org-babel-tangle-lang-exts '(("python" . "py")
                                     ("emacs-lisp" . "el")
                                     ("elisp" . "el")))
  (setq org-clock-persist t)
  (setq org-closed-keep-when-no-todo t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-descriptive-links nil)
  (setq org-duration-format 'h:mm)
  (setq org-edit-src-content-indentation 0)
  (setq org-export-backends '(ascii html icalendar latex md))
  (setq org-export-dispatch-use-expert-ui t)
  (setq org-export-with-smart-quotes t)
  ;; http://stackoverflow.com/questions/17239273/org-mode-buffer-latex-syntax-highlighting
  (setq org-highlight-latex-and-relatex '(latex script entities))
  (setq org-html-with-latex '(mathjax))
  (setq org-image-actual-width nil)
  (setq org-latex-create-formula-image-program 'imagemagick)
  ;; The differences from the default are that the `colorlinks` option is
  ;; passed to hyperref, and `braket`, `microtype`, and `xcolor` are used.
  (setq org-latex-default-packages-alist '(("AUTO" "inputenc" t
                                            ("pdflatex"))
                                           ("T1" "fontenc" t
                                            ("pdflatex"))
                                           ("" "graphicx" t)
                                           ("" "grffile" t)
                                           ("" "longtable" nil)
                                           ("" "wrapfig" nil)
                                           ("" "rotating" nil)
                                           ("normalem" "ulem" t)
                                           ("" "amsmath" t)
                                           ("" "textcomp" t)
                                           ("" "amssymb" t)
                                           ("" "capt-of" nil)
                                           ("colorlinks=true" "hyperref" nil)
                                           ("" "braket" t)
                                           ("final" "microtype" nil)
                                           ("usenames,dvipsnames,svgnames,table" "xcolor" nil)))
  (setq org-latex-hyperref-template "\\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},\n pdfsubject={%d},\n pdfcreator={%c},\n pdflang={%L},\n colorlinks=true,\n linkcolor=MidnightBlue,\n citecolor=MidnightBlue,\n urlcolor=MidnightBlue}\n")
  (setq org-latex-inline-image-rules '(("file" . "\\.\\(pdf\\|jpeg\\|jpg\\|png\\|ps\\|eps\\|tikz\\|pgf\\|svg\\|gif\\)\\'")))
  (setq org-latex-pdf-process '("latexmk -pdf -xelatex -shell-escape -output-directory=%o %f"))
  (setq org-list-allow-alphabetical t)
  (setq org-log-done 'time)
  (setq org-log-done-with-time t)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-startup-folded nil)
  ;; http://superuser.com/questions/299886/linewrap-in-org-mode-of-emacs
  (setq org-startup-truncated nil)
  ;; http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html
  ;; You need to install pygments to use minted.
  (when (executable-find "pygmentize")
    (add-to-list 'org-latex-packages-alist '("" "minted" nil))
    (setq org-latex-listings 'minted)
    (setq org-latex-minted-options
          '(("framesep" "2mm"))))
  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes '("refsheet" "\\documentclass{refsheet}"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  (org-clock-persistence-insinuate))
(use-package htmlize)
(use-package ox-gfm
  :after org
  :hook (org-mode . (lambda () (require 'ox-gfm))))
(use-package ox-pandoc
  :after org
  :hook (org-mode . (lambda () (require 'ox-pandoc))))
(use-package ox-trac
  :after org
  :hook (org-mode . (lambda () (require 'ox-trac))))
#+end_src

From https://emacs.stackexchange.com/questions/20577/org-babel-load-all-languages-on-demand.

#+BEGIN_SRC emacs-lisp
(defadvice org-babel-execute-src-block (around load-language nil activate)
  "Load language if needed"
  (let ((language (org-element-property :language (org-element-at-point))))
    (unless (cdr (assoc (intern language) org-babel-load-languages))
      (add-to-list 'org-babel-load-languages (cons (intern language) t))
      (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
    ad-do-it))
#+END_SRC

Additional things of interest might be found in https://github.com/xiaohanyu/oh-my-emacs/blob/master/core/ome-org.org.

Every time an Org buffer is saved, automatically export it to HTML. Taken from https://www.reddit.com/r/emacs/comments/4golh1/how_to_auto_export_html_when_saving_in_orgmode/.

#+BEGIN_SRC emacs-lisp
(defun org-mode-export-hook ()
  (add-hook 'after-save-hook 'org-html-export-to-html t t))
(add-hook 'org-mode-hook #'org-mode-export-hook)
#+END_SRC

A function to toggle this auto-HTML-export behavior. Does this play nice with the function above?

#+BEGIN_SRC emacs-lisp
(defun toggle-org-html-export-on-save ()
  (interactive)
  (if (memq 'org-html-export-to-html after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-html-export-to-html t)
        (message "Disabled org html export on save for current buffer..."))
    (add-hook 'after-save-hook 'org-html-export-to-html nil t)
    (message "Enabled org html export on save for current buffer...")))
#+END_SRC

* Compilation

Taken from https://emacs.stackexchange.com/questions/62/hide-compilation-window#110.

#+BEGIN_SRC emacs-lisp
(defun ejb/comint-clear ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
(bind-key (kbd "C-c l") 'ejb/comint-clear comint-mode-map)
(setq compilation-scroll-output t)
#+END_SRC

* C/C++

These are valid for all C-style modes (I think).

#+BEGIN_SRC emacs-lisp
(setq c-basic-offset 4)
(setq c-default-style
      '((java-mode . "java")
        (awk-mode . "awk")
        (other . "k&r")))
(setq c-doc-comment-style
      '((c-mode . javadoc)
        (java-mode . javadoc)
        (pike-mode . autodoc)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ccls
  :after lsp-mode
  :hook ((c-mode c++-mode) . lsp-deferred))
#+END_SRC

This only makes sense for c++-mode.

https://stackoverflow.com/questions/2619853/emacs-override-indentation

#+BEGIN_SRC emacs-lisp
(defun my-c++-setup ()
  (c-set-offset 'innamespace [0]))
(add-hook 'c++-mode-hook 'my-c++-setup)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :bind (("C-M-<tab>" . clang-format-region)))
#+END_SRC

* Java

#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :hook (java-mode . lsp-deferred))
#+END_SRC

* FORTRAN

#+begin_src emacs-lisp
(setq fortran-comment-region "C")
#+end_src

* LaTeX

#+begin_src emacs-lisp
(use-package auctex
  :config
  (add-to-list 'font-latex-math-environments "dmath"))
(use-package auctex-latexmk
  :after auctex
  :init
  (auctex-latexmk-setup))
;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
;; (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
;; (setq font-latex-math-environments
;;       (append '("dmath")
;;               font-latex-math-environments))
#+end_src

* Python

#+begin_src emacs-lisp
;; The package is "python" but the mode is "python-mode":
(use-package python
  :straight (python :type built-in)
  :hook (python-mode . lsp-deferred)
  :mode (("\\.ipy\\'" . python-mode))
  :interpreter ("ipython" . python-mode)
  :config
  (setq python-fill-docstring-style 'pep-257-nn)
  (setq python-indent-guess-indent-offset nil)
  ;; The output from side-effects is gibberish :(
  ;; (setq python-shell-interpreter "ipython")
)

(use-package anaconda-mode
  :after python
  :hook ((python-mode . anaconda-mode)
         (python-mode . anaconda-eldoc-mode)))

(use-package company-anaconda
  :init
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-anaconda)
    (ejb/fix-company-ordering)))

(use-package virtualenvwrapper
  :after python)

(use-package conda
  :after delight
  :hook ((after-init . conda-env-initialize-interactive-shells)
         (after-init . conda-env-autoactivate-mode))
  :commands (conda-env-deactivate
             conda-env-activate
             conda-env-activate-path
             conda-env-list
             conda-env-initialize-eshell
             conda-env-activate-for-buffer))

;; TODO store Python version in variable only when conda env changes
;; (defun ejb/conda-mode-lighter ()
;;   "Only display the lighter if a conda environment is active."
;;   (if (equal conda-env-current-name nil)
;;       ""
;;     (progn
;;       (setq current-python-version
;;             (cadr
;;              (split-string
;;               (shell-command-to-string
;;                (format "%s/bin/python --version" (getenv "CONDA_PREFIX"))))))
;;       (format "conda[%s:%s]" current-python-version conda-env-current-name))))
;; (defun ejb/conda-mode-lighter ()
;;   "Only display the lighter if a conda environment is active."
;;   (if (equal conda-env-current-name nil)
;;       ""
;;     (format " conda[%s]" conda-env-current-name)))
;; TODO this delight for conda breaks elcord.
;; (delight 'python-mode '(:eval (format "Python%s" (ejb/conda-mode-lighter))) :major)

(use-package pyenv-mode
  :after python)

(use-package lsp-python-ms
  :disabled t
  :after lsp-mode
  :hook (python-mode . (lambda ()
                         (require 'lsp-python-ms)
                         (lsp-deferred)))
  :config
  (setq lsp-python-ms-cache "Library")
  (setq lsp-python-ms-nupkg-channel "daily"))
#+end_src

** Reformatters

If ~:after python~ isn't present, the bindings don't get added properly?

#+BEGIN_SRC emacs-lisp
(use-package blacken
  :after python
  :bind
  (:map python-mode-map
        ("C-c C-b" . blacken-buffer))
  :config
  (setq blacken-allow-py36 t))

(use-package yapfify
  :after python
  :bind
  (:map python-mode-map
        ("C-c C-y b" . yapfify-buffer)
        ("C-c C-y r" . yapfify-region)))

(use-package isortify
  :after python
  :bind
  (:map python-mode-map
        ("C-c C-i" . isortify-buffer)))
#+END_SRC

** Leftovers

#+BEGIN_SRC emacs-lisp
(use-package cython-mode)
(use-package flycheck-cython)
(use-package pip-requirements)
#+END_SRC

* Markdown

Rather than use =--mathjax== with a URL argument, =--include-in-header= allows the insertion of arbitrary HTML into Pandoc's output. The =mathjax.html= file contains Chemistry Stack Exchange's header scripts for first configuring the MathJax extension to load =mhchem=, then loads MathJax.

See https://stackoverflow.com/questions/25410701/how-do-i-include-meta-tags-in-pandoc-generated-html for an example of how including arbitrary HTML works.

See https://chemistry.meta.stackexchange.com/questions/3540/what-additional-formatting-features-are-available-to-mathjax-possibly-via-requ for more information about what can be done with the MathJax extension.

#+begin_src emacs-lisp
(use-package markdown-mode
  :hook (markdown-mode . pandoc-mode)
  ;; Don't run pandoc on every save, it gets annoying.
  ;; :config
  ;; (add-hook 'markdown-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'after-save-hook 'pandoc-run-pandoc t :local)))
  :config
  (setq markdown-asymmetric-header t)
  (setq markdown-content-type "application/xhtml+xml")
  ;; This isn't super necessary since I have pandoc run a similar command
  ;; every time I save with these default arguments, but this always produces
  ;; HTML where pandoc-mode might not.
  (setq markdown-command "pandoc --from=markdown --to=html5 --highlight-style=pygments --standalone --include-in-header=${HOME}/.emacs.d/mathjax.html")
  (setq markdown-enable-math t)
  (setq markdown-fontify-code-blocks-natively t)
  (setq markdown-hide-markup nil)
  (setq markdown-hide-urls nil)
  (setq markdown-italic-underscore t)
  (setq markdown-link-space-sub-char "-"))
#+end_src

* deft

Taken conveniently from [[http://jblevins.org/projects/deft/][Jason Blevins' website]] and http://pragmaticemacs.com/emacs/make-quick-notes-with-deft/.

#+begin_src emacs-lisp
(use-package deft
  :bind (("C-c d" . deft))
  :config
  (setq deft-auto-save-interval 60.0)
  ;; "${HOME}/Dropbox/Notes" doesn't work, why is that?
  (setq deft-directory "~/Dropbox/Notes")
  (setq deft-default-extension "md")
  (setq deft-extensions '("txt" "text" "utf8" "taskpaper" "md" "markdown" "org" "tex"))
  (setq deft-recursive t)
  (setq deft-text-mode 'gfm-mode)
  (setq deft-time-format " %Y-%m-%d %H:%M:%S")
  (setq deft-use-filename-as-title t)
  (setq deft-use-filter-string-as-filename t))
#+end_src

https://stackoverflow.com/a/35450025/3249688

#+BEGIN_SRC emacs-lisp
(defun yashi/new-scratch-buffer-in-org-mode ()
  (interactive)
  (switch-to-buffer (generate-new-buffer-name "*temp*"))
  (org-mode))
(bind-key "<f7>" 'yashi/new-scratch-buffer-in-org-mode)

(defun yashi/deft-new-file ()
  (interactive)
  (let ((deft-filter-regexp nil))
    (deft-new-file)))
(bind-key "<f6>" 'yashi/deft-new-file)
#+END_SRC

* CMake

This section needs to come after the Markdown section so that CMake files get recognized properly.

#+begin_src emacs-lisp
(use-package cmake-mode
  :hook (cmake-mode . lsp-deferred)
  :config
  (setq cmake-tab-width 4))
#+end_src

* Shell Scripts

https://www.reddit.com/r/emacs/comments/5tzub2/improving_shellscriptmode_highlight/

#+BEGIN_SRC emacs-lisp
(defconst sh-mode--string-interpolated-variable-regexp
  "{\\$[^}\n\\\\]*\\(?:\\\\.[^}\n\\\\]*\\)*}\\|\\${\\sw+}\\|\\$\\sw+")

(defun sh-mode--string-interpolated-variable-font-lock-find (limit)
  (while (re-search-forward sh-mode--string-interpolated-variable-regexp limit t)
    (let ((quoted-stuff (nth 3 (syntax-ppss))))
      (when (and quoted-stuff (member quoted-stuff '(?\" ?`)))
        (put-text-property (match-beginning 0) (match-end 0)
                           'face 'font-lock-variable-name-face))))
  nil)

;; TODO I'm not sure why this doesn't work.
;; (with-eval-after-load 'sh-mode
;;   (font-lock-add-keywords 'sh-mode
;;                           `(sh-mode--string-interpolated-variable-font-lock-find)
;;                           'append))
(font-lock-add-keywords 'sh-mode
                        `((sh-mode--string-interpolated-variable-font-lock-find))
                        'append)

;; This doesn't work because it only finds the first instance.
;; (font-lock-add-keywords 'sh-mode '(("\".*?\\(\\${.*?}\\).*?\"" 1 font-lock-variable-name-face prepend)))
#+END_SRC

* EditorConfig

http://editorconfig.org/

TODO How to make this take precedence over =dtrt-indent=?

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  ;; This isn't useful when connecting to a remote machine that's using TRAMP.
  :if (not (string-match "\.isi\.edu" (shell-command-to-string "hostname -f")))
  :hook ((prog-mode text-mode) . editorconfig-mode)
  :config
  (defun ejb/editorconfig-has-editorconfig ()
    "If there is an .editorconfig file associated with the
current buffer, return its path, otherwise nil."
    (if buffer-file-name
        (let* ((directory (file-name-directory buffer-file-name))
               (file (editorconfig-core-get-nearest-editorconfig directory)))
          file)))
  (defun ejb/editorconfig-mode-lighter ()
    "Only display the lighter if an .editorconfig file has been found."
    (if (ejb/editorconfig-has-editorconfig)
        " EC"
      ""))
  ;; TODO This is disabled until it can be integrated with Projectile. Doing
  ;; the naive search with `editorconfig-core-get-nearest-editorconfig` is
  ;; death over TRAMP.
  ;; :delight '(:eval (ejb/editorconfig-mode-lighter))
  :delight)
#+END_SRC

* Conf (builtin)

#+BEGIN_SRC emacs-lisp
(use-package conf-mode
  :mode
  ; generic
  ((".nanorc" . conf-space-mode)
   (".coveragerc" . conf-unix-mode)
   ; Python tools (linter config)
   (".flake8" . conf-unix-mode)
   (".pylintrc" . conf-unix-mode)
   (".style.yapf" . conf-unix-mode)))
#+END_SRC

* XML (builtin)

#+BEGIN_SRC emacs-lisp
(use-package nxml
  :mode (("\\.rdf\\'" . nxml-mode)
         ("\\.xmp\\'" . nxml-mode)))
#+END_SRC

* MATLAB/Octave (builtin)

#+BEGIN_SRC emacs-lisp
;; Don't use matlab-mode.
;; (use-package matlab-mode)
(setq octave-block-offset 4)
#+END_SRC

* Julia

#+BEGIN_SRC emacs-lisp
(use-package julia-mode)
;; Snail requires vterm
(use-package vterm)
(use-package julia-snail
  :hook (julia-mode . julia-snail-mode))
(use-package lsp-julia
  ;; Not working with Julia v1.4 right now.
  :disabled t
  :hook (julia-mode . (lambda ()
                        (require 'lsp-julia)
                        (lsp-deferred))))
#+END_SRC

* YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  ;; A decent assumption for work-specific pseudo-YAML files.
  :mode (("\\.params\\'" . yaml-mode)
         ("\\.clang-format\\'" . yaml-mode)))
(use-package flycheck-yamllint
  :after (flycheck yaml-mode)
  :hook (yaml-mode . flycheck-yamllint-setup)
  :config
  (add-to-list 'flycheck-disabled-checkers 'yaml-jsyaml))
#+END_SRC

* JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode (("\\.cjson\\'" . json-mode)
         ("\\.qcjson\\'" . json-mode)))
#+END_SRC

* HTML

#+BEGIN_SRC emacs-lisp
(use-package web-mode)
(use-package jinja2-mode
  :mode (("\\.j2\\'" . jinja2-mode)))
(use-package web-beautify
  :config
  (eval-after-load 'js2-mode
    '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
  (eval-after-load 'json-mode
    '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))
  (eval-after-load 'sgml-mode
    '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))
  (eval-after-load 'css-mode
    '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css)))
#+END_SRC

* Rust

#+BEGIN_SRC emacs-lisp
(use-package rustic
  ;; :bind (:map rustic-mode-map ("C-c C-c C-;" . rustic-docstring-around-dwim))
  :config
  (setq rustic-ansi-faces ansi-color-names-vector)
  (setq rustic-format-on-save t)
  (setq rustic-indent-method-chain t)
  (setq rustic-lsp-server 'rust-analyzer)
  (defun rustic-docstring-around-dwim ()
    "Use `comment-dwim' to make a Rust docstring for the thing surrounding the comment."
    (interactive)
    (let ((comment-start "//! "))
      (call-interactively 'comment-dwim))))
#+END_SRC

* Scheme/Lisp

** Lisp

#+BEGIN_SRC emacs-lisp
(setq common-lisp-hyperspec-root (expand-file-name "~/.emacs.d/clhs/HyperSpec/"))
(use-package slime
  :config
  (setq common-lisp-style-default "modern")
  ;; default is "lisp", which on my Arch Linux machine is CMUCL
  (setq inferior-lisp-program "sbcl")
  (setq lisp-indent-function 'common-lisp-indent-function)
  (setq slime-contribs '(slime-cl-indent slime-fancy))
  :init
  (require 'slime-autoloads))
#+END_SRC

** Hy

#+BEGIN_SRC emacs-lisp
(use-package hy-mode)
#+END_SRC

** Scheme and Racket

Modified to remove/disable Racket.

#+BEGIN_SRC emacs-lisp
(use-package geiser
  :config
  (setq geiser-active-implementations '(guile chicken chez mit chibi))
  (setq geiser-implementations-alist '(((regexp "\\.scm\\'") guile)
                                       ((regexp "\\.scm\\'") chicken)
                                       ((regexp "\\.release-info\\'") chicken)
                                       ((regexp "\\.meta\\'") chicken)
                                       ((regexp "\\.setup\\'") chicken)
                                       ((regexp "\\.ss\\'") chez)
                                       ((regexp "\\.def\\'") chez)
                                       ((regexp "\\.scm\\'") mit)
                                       ((regexp "\\.pkg\\'") mit)
                                       ((regexp "\\.scm\\'") chibi)
                                       ((regexp "\\.sld\\'") chibi))))
(use-package scribble-mode
  :hook (scribble-mode . geiser))
(use-package racket-mode)
#+END_SRC

* Kotlin

#+BEGIN_SRC emacs-lisp
(use-package kotlin-mode
  :hook (kotlin-mode . lsp-deferred))
(use-package flycheck-kotlin
  :init
  (with-eval-after-load 'flycheck
    (flycheck-kotlin-setup)))
#+END_SRC

* Semantic web: SPARQL/Turtle

#+BEGIN_SRC emacs-lisp
(use-package sparql-mode
  :mode (("\\.sparql\\'" . sparql-mode)
         ("\\.rq\\'" . sparql-mode)))
;; TODO company-sparql
(use-package ttl-mode
  :straight (ttl-mode :type git :flavor melpa :host github :repo "nxg/ttl-mode")
  :delight "N3/Turtle"
  :mode (("\\.n3\\'" . ttl-mode)    ; Notation3
         ("\\.nt\\'" . ttl-mode)    ; N-Triples
         ("\\.shacl\\'" . ttl-mode) ; SHACL (not a graph, but constraints; looks similar)
         ("\\.ttl\\'" . ttl-mode)   ; Turtle (Terse RDF Triple Language)
         ("\\.turtle\\'" . ttl-mode)))
#+END_SRC

* Nim

=flycheck-nimsuggest=, despite being "old", is required by =nimsuggest-mode=.

#+BEGIN_SRC emacs-lisp
(use-package flycheck-nimsuggest)
(use-package nim-mode
  :bind (:map nim-mode-map ("C-c C-;" . nim-docstring-dwim))
  ;; We want to be able to "fix" the company backend ordering after
  ;; `nimsuggest-mode' adds `company-nimsuggest' to `company-backends', so the
  ;; hooks need to be in this order.
  :hook ((nim-mode . ejb/fix-company-ordering)
         (nim-mode . nimsuggest-mode)
         (nim-mode . lsp-deferred))
  :config
  (defun nim-docstring-dwim ()
    "Use `comment-dwim' to make a Nim docstring."
    (interactive)
    (let ((comment-start "## "))
      (call-interactively 'comment-dwim))))
;; TODO I'm not sure what the advantage of this package is.
;; (use-package flycheck-nim)
#+END_SRC

* Other languages, modes, and packages

#+BEGIN_SRC emacs-lisp
(use-package chapel-mode)
(use-package cuda-mode)
(use-package dockerfile-mode)
(use-package graphql-mode)
(use-package graphviz-dot-mode)
(use-package lua-mode)
(use-package meson-mode)
(use-package pacfiles-mode)
(use-package pkgbuild-mode)
(use-package systemd)
#+END_SRC

* External services

** Discord

#+BEGIN_SRC emacs-lisp
(use-package elcord
  ;; No work machines (laptop, cluster)
  :if (not (string-match "isi" (shell-command-to-string "hostname -f")))
  :config
  (setq elcord-client-id '"714056771391717468")
  (setq elcord-refresh-rate 5)
  (setq elcord-use-major-mode-as-main-icon t)
  :init
  (elcord-mode))
#+END_SRC

** Wakatime

#+BEGIN_SRC emacs-lisp
(use-package wakatime-mode
  :if (executable-find "wakatime")
  :delight
  :config
  (setq wakatime-cli-path (executable-find "wakatime"))
  :init
  (global-wakatime-mode))
#+END_SRC
