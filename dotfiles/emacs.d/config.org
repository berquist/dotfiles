* Straight and other prerequisites

#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-

(setq straight-use-package-by-default t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq use-package-always-defer t
      use-package-verbose t)
(straight-use-package 'use-package)
#+END_SRC

Fundamental third-party packages that don't go anywhere else.

#+BEGIN_SRC emacs-lisp
(setq read-process-output-max (* 1024 1024 5))  ; 5 MB

;; Load this before any other third-party packages.
(use-package no-littering
  :demand t)

(use-package dash
  :demand t)

;; Set the path properly. Don't have a conditional on using the window system
;; in order to circumvent
;; https://emacs.stackexchange.com/questions/27918/why-is-exec-path-different-in-emacsclient-emacsserver-than-in-emacs.
(use-package exec-path-from-shell
  :init
  (exec-path-from-shell-initialize))
;; Starting the GUI doesn't know anything about the Keychain:
;; https://emacs.stackexchange.com/questions/41343/magit-asks-for-passphrase-for-ssh-key-every-time
;; I'm not sure that all of these are necessary anymore, considering that most
;; things should be in the correct dotfile.
(setq ejb/desired-envvars
      '("ANACONDA_HOME"
        "GIT_AUTHOR_EMAIL"
        "GIT_COMMITTER_EMAIL"
        "SSH_AGENT_PID"
        "SSH_AUTH_SOCK"
        "WORKON_HOME"))
(when (display-graphic-p)
  (-each ejb/desired-envvars (lambda (envvar) (exec-path-from-shell-copy-env envvar))))
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp
(defun ejb/insert-date ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

(defun ejb/comparator (e1 e2 ordering)
  "Compare two elements based on a partial ordering. Elements
that are not part of the ordering are stably kept at the end."
  (let ((contains-e1 (-contains-p ordering e1))
        (contains-e2 (-contains-p ordering e2)))
    (cond
     ((and (not contains-e1) (not contains-e2)) nil)
     ((and (not contains-e1) contains-e2) nil)
     ((and contains-e1 (not contains-e2)) t)
     ((< (-elem-index e1 ordering) (-elem-index e2 ordering)) t)
     (t nil))))
#+END_SRC

* M-x customize

Only package-selected-packages and custom-safe-themes should go in here.
- https://www.reddit.com/r/emacs/comments/4x655n/packageselectedpackages_always_appear_after/
- https://www.reddit.com/r/emacs/comments/53zpv9/how_do_i_get_emacs_to_stop_adding_custom_fields/

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
;; Intentionally save to a customization file that is not loaded by Emacs and
;; is ignored by Git. All permanent customization should be in this file, but
;; not sending to /dev/zero allows temporary customization via `customize`
;; then cherry-picking from `custom.el` into here.
#+END_SRC

* General configuration

What's the difference between setq and setq-default? See here: http://stackoverflow.com/questions/18172728/the-difference-between-setq-and-setq-default-in-emacs-lisp

#+begin_src emacs-lisp
(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(tooltip-mode -1)

(setq inhibit-splash-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t
      initial-scratch-message nil)

(load "~/dotfiles/dotfiles-private/private.el")
(setq-default user-full-name "Eric J. Berquist")
(setq-default user-mail-address "eric.berquist@gmail.com")

;; took some tricks from http://www.aaronbedra.com/emacs.d/

;; http://stackoverflow.com/questions/3281581/how-to-word-wrap-in-emacs
;; http://stackoverflow.com/questions/12989072/showing-continuation-lines-in-emacs-in-a-text-terminal
(setq-default transient-mark-mode t)
(setq-default visual-line-mode t)
;; Never truncate lines, even in partial width windows.
(setq-default truncate-lines nil)
(setq truncate-partial-width-windows nil)
;; (global-display-line-numbers-mode)
(setq-default line-number-mode t)
(setq-default column-number-mode t)
(setq-default cursor-type 'box)

;; Enable maximum syntax highlighting wherever possible.
(setq-default global-font-lock-mode t)
(setq-default font-lock-maximum-decoration t)

;; Bells are annoying, stop ringing!
(setq-default visible-bell nil)
(setq-default audible-bell nil)
(setq-default ring-bell-function 'ignore)

;; 'y' is two characters less than 'yes'.
;; 'defalias' or 'fset'?
(defalias 'yes-or-no-p 'y-or-n-p)

;; This is really annoying, yes I want to quit
(setq confirm-kill-processes nil)

;; death to tabs, tabs are evil
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; Line length when executing `fill-paragraph`. Default is 70. See
;; https://www.emacswiki.org/emacs/FillParagraph and
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Commands.html.
(setq-default fill-column 78)
;; (setq-default sentence-end-double-space nil)

;; Automatically reload buffers when their files change, and make sure
;; to check on the version control status every now and then.
(global-auto-revert-mode t)
;; Turns out this is *extremely* irritating and moves the mark every time the
;; buffer refreshes!
;; (setq-default auto-revert-check-vc-info t)

;; Allow making whole regions uppercase or lowercase.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

;; Don't actively display warnings from bytecode compilation.
(setq warning-suppress-types '((comp)
                               (direnv)
                               (lsp-mode)
                               (ox-pandoc)))
#+end_src

* Backups/autosaving

#+begin_src emacs-lisp
;; let's live on the edge and disable backup and autosave
(setq-default backup-inhibited t)
(setq-default auto-save-default nil)
(setq-default create-lockfiles nil)
(setq-default make-backup-files nil)
#+end_src

* Disable popup boxes

#+begin_src emacs-lisp
(defadvice yes-or-no-p (around prevent-dialog activate)
  "Prevent yes-or-no-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice y-or-n-p (around prevent-dialog-yorn activate)
  "Prevent y-or-n-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
#+end_src

* Key bindings

- To view all current keybindings, =C-h b=.
- To view all personal keybindings, =M-x describe-personal-keybindings=.
- Used to have stuff for ='comment-or-uncomment-region=, ='comment-region=, and ='uncomment-region= here, but =M-;= calls ='comment-dwim=, which is what you really want.

#+begin_src emacs-lisp
(bind-key (kbd "M-/") 'hippie-expand)
(bind-key (kbd "C-x C-b") 'switch-to-buffer)
(bind-key (kbd "C-x b") 'ibuffer)
(bind-key (kbd "C-c b") 'switch-to-previous-buffer)
(bind-key (kbd "C-x C-9") 'text-scale-decrease)
(bind-key (kbd "C-x C-0") 'text-scale-increase)
(bind-key (kbd "C-x C-h") 'replace-string)
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package which-key
  ;; why doesn't this work
  ;; :delight
  :config
  (setq which-key-lighter "")
  :init
  (which-key-mode))
#+END_SRC

* dir-locals

Taken from https://emacs.stackexchange.com/a/13096/10950

#+BEGIN_SRC emacs-lisp
(defun ejb/my-reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun ejb/my-reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir))
        (my-reload-dir-locals-for-current-buffer)))))

;; (add-hook 'emacs-lisp-mode-hook
;;           (defun enable-autoreload-for-dir-locals ()
;;             (when (and (buffer-file-name)
;;                        (equal dir-locals-file
;;                               (file-name-nondirectory (buffer-file-name))))
;;               (add-hook (make-variable-buffer-local 'after-save-hook)
;;                         'my-reload-dir-locals-for-all-buffer-in-this-directory))))
#+END_SRC

* Snippets

TODO:
- =set -euo pipefail= in shell scripts
- =if __name__ == "__main__"= boilerplate in Python
  - =def main() -> None:= with =argparse=

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :disabled t
  ;; TODO
  ;; :bind (:map yas-minor-mode-map
  ;;             ("C-M-/" . yas-expand)
  ;;             ("TAB" . nil))
  :init
  (yas-global-mode 1))
(use-package yasnippet-snippets
  :disabled t)
#+END_SRC

* Parens/whitespace/indentation

#+begin_src emacs-lisp
(electric-pair-mode)
(show-paren-mode)
(setq show-paren-delay 0.0)

(use-package whitespace
  :bind (("C-c t" . whitespace-mode))
  :mode (("\\.csv\\'" . whitespace-mode)
         ("\\.tab\\'" . whitespace-mode)
         ("\\.tsv\\'" . whitespace-mode))
  :config
  ;; use the fill-column value
  (setq whitespace-line-column nil)
  (setq whitespace-display-mappings
   '((space-mark   ?\    [?\u00B7]     [?.])                    ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
     ;; (space-mark ?\s [183] [46])
     ;; (space-mark 32 [32] [46]) ; normal space, display nothing
     (space-mark   ?\xA0 [?\u00A4]     [?_])                    ; hard space: currency sign
     ;; (newline-mark ?\n [9166 10] [36 10])                    ; 10 LINE FEED, 9166 RETURN SYMBOL 「⏎」, 36 DOLLAR SIGN 「$」
     (newline-mark ?\n   [?\u21B5 ?\n] [172 10] [?\u00AF ?\n])  ; eol: downwards arrow with corner leftwards, ..., macron
     (tab-mark     ?\t   [9655 9]      [92 9] ))                ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」, 92 9 CHARACTER TABULATION 「\t」
   whitespace-style
   '(face
     trailing
     tabs
     ;; spaces
     ;; lines
     ;; lines-tail
     newline
     empty
     ;; indentation::tab
     ;; indentation::space
     ;; indentation
     ;; big-indent
     space-after-tab::tab
     ;; space-after-tab::space
     ;; space-after-tab
     space-before-tab::tab
     ;; space-before-tab::space
     space-before-tab
     space-mark
     tab-mark
     newline-mark
     ))
  ;; By default, `space-before-tab` considers zero or more spaces before a
  ;; tab, but `space-after-tab` only considers `tab-width` or more
  ;; spaces. Since my goal is not to look for indentation problems, but find
  ;; _any_ mixing, consider any number of spaces after a tab. Additionally,
  ;; apply font locking to the spaces, not the tab.
  (setq whitespace-space-after-tab-regexp '("\011+\\(\\( \\{0,\\}\\)+\\)" . "\\(\011+\\) \\{0,\\}"))
  :init
  (setq global-whitespace-mode nil))

(use-package dtrt-indent
  :init
  (dtrt-indent-global-mode))

(use-package unfill
  :bind (("C-M-q" . unfill-paragraph)))

;; Always place a newline at the end of files, like nano does by
;; default.
(setq require-final-newline t)
#+end_src

* Theming and window shaping

** mode line

#+BEGIN_SRC emacs-lisp
(use-package delight)
(delight 'emacs-lisp-mode "Elisp" :major)
#+END_SRC

** Themes

#+begin_src emacs-lisp
;; These are nice when I'm bored...
(use-package abyss-theme)
(use-package base16-theme)
(use-package base16-eva-theme
  :straight (:host github
             :repo "kjakapat/eva-theme"
             :files ("emacs/build/*.el"))
  ;; :config
  ;; (load-theme 'base16-eva t)
  )
(use-package colonoscopy-theme)
(use-package dracula-theme)
(use-package emacs-tron-theme
  :straight (:host github
             :repo "ivanmarcin/emacs-tron-theme"))
(use-package gotham-theme)
(use-package plan9-theme)
(use-package punpun-theme) ; (punpun-light, punpun-dark)
(use-package rebecca-theme)
(use-package spacegray-theme)
(use-package tron-legacy-theme)
(use-package tronesque-theme
  :straight (:host github
             :repo "aurelienbottazini/tronesque"
             :files ("themes/tronesque-theme.el")))
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
;; ...but ultimately this is my daily driver.
(load-theme 'wombat2 t)
(use-package rainbow-mode)
#+end_src

** Windows

TODO set fallback fonts, see http://ergoemacs.org/emacs/emacs_list_and_set_font.html

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Panic Sans-11"))
;; https://emacs.stackexchange.com/q/45895
(set-face-attribute 'fixed-pitch nil :family "Fira Mono")

(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))
(setq-default indicate-buffer-boundaries 'right)

(use-package default-text-scale
  :hook (after-init . default-text-scale-mode))
#+end_src

* Narrowing, searching, and projects

#+BEGIN_SRC emacs-lisp
(setq completions-format 'vertical)
#+END_SRC

[[https://github.com/raxod502/selectrum][Selectrum]] provides a completion UI. [[https://github.com/raxod502/prescient.el/][Prescient]] handles sorting and filtering.

#+begin_src emacs-lisp
(use-package prescient
  :hook (after-init . prescient-persist-mode))
(use-package company-prescient
  :hook (after-init . company-prescient-mode))
(use-package selectrum
  :hook (after-init . selectrum-mode))
(use-package selectrum-prescient
  :hook (after-init . selectrum-prescient-mode))
#+end_src

[[https://github.com/raxod502/ctrlf][CTRLF]] replaces Isearch for single-buffer text search.

#+begin_src emacs-lisp
(use-package ctrlf
  ;; prefer fuzzy over literal searching
  :bind (:map ctrlf-mode-map
              ([remap isearch-forward] . ctrlf-forward-fuzzy)
              ([remap isearch-backward] . ctrlf-backward-fuzzy)
              ([remap isearch-forward-regexp] . ctrlf-forward-fuzzy-regexp)
              ([remap isearch-backward-regexp] . ctrlf-backward-fuzzy-regexp))
  :init
  (ctrlf-mode))
#+end_src

Some of my computers have [[https://github.com/BurntSushi/ripgrep][ripgrep]] installed.
- For =ripgrep=, which has the traditional =grep= interface, use =M-x ripgrep-regexp= to activate.

#+BEGIN_SRC emacs-lisp
;; This package is needed for projectile-ripgrep to work. Don't disable it.
(use-package ripgrep
  :config
  (setq ripgrep-arguments '("--hidden")))
;; ...though projectile will try this one if the above isn't available.
(use-package rg
  :config
  (setq rg-command-line-flags '("--hidden")))
(use-package deadgrep
  ;; <f5> is suggested, but that is inconvenient on my keyboards...
  :bind (("C-c g" . deadgrep)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun ejb/conditional-append (list items)
  "Only append the contents of ITEMS to LIST that don't already
appear in LIST."
  (append list (-difference items list)))

(defun ejb/conditional-prepend (list items)
  "Only prepend the contents of ITEMS to LIST that don't already
appear in LIST."
  (append (-difference items list) list))

(defun ejb/vc-svn-url (file-or-dir &optional _remote-name)
  "Get the Subversion URL for FILE-OR-DIR if possible, returning
nil otherwise."
  (require 'vc-svn)
  (let ((default-directory (vc-svn-root file-or-dir)))
    (if default-directory
        (with-temp-buffer
          (vc-svn-command (current-buffer) 0 nil
                          "info" "--show-item" "url")
          (buffer-substring-no-properties (point-min) (1- (point-max)))))))

;; (defun f-parents (path)
;;   "Get all the parent paths of PATH, from oldest to youngest, not
;; including PATH."
;;   (let ((parents '())
;;         (parent (f-parent path)))
;;     (while parent
;;       (setq parents (cons parent parents))
;;       (setq parent (f-parent parent)))
;;     parents))

;; (defun f-parents-incl (path)
;;   "Get all the parent paths of PATH, from oldest to youngest,
;; including PATH."
;;   (append (f-parents path) (list (directory-file-name path))))

;; (defun ejb/projectile-root-qchem (dir &optional list)
;;   (let ((parents (f-parents-incl dir)))
;;     (cl-loop for parent in parents
;;              do
;;              (setq vc-svn-url (ejb/vc-svn-url parent))
;;              if vc-svn-url
;;              return parent
;;              end)))

;; (defun ejb/projectile-root-qchem (dir &optional list)
;;   "If $QC is defined, set the projectile root to it, avoiding the need to place a `.projectile`' file there."
;;   (getenv "QC"))

(defun ejb/projectile-root-qchem (dir &optional list)
  "Find the project root of a Q-Chem Subversion repository.

When inside a directory of an external, such as in a development
package or Q-Chem trunk, the project root should be the
development package or the Q-Chem checkout, not the directory of
the external.

Placing `projectile-root-top-down-recurring' ahead of
`projectile-root-top-down' will technically work, since it finds
the top-level repository rather than the external, but it messes
with the default ordering Projectile uses.
"
  (let ((root-top-down-recurring (projectile-root-top-down-recurring dir '(".svn"))))
    (if root-top-down-recurring
        (let ((vc-svn-url (ejb/vc-svn-url root-top-down-recurring)))
          (if (string-prefix-p "https://jubilee.q-chem.com/" vc-svn-url)
              root-top-down-recurring)))))

(use-package projectile
  :bind ("C-c p" . projectile-command-map)
  :config
  (setq projectile-mode-line-prefix " P")
  (setq projectile-require-project-root t)
  (setq projectile-sort-order 'access-time)
  (setq projectile-project-search-path
        '("~/development" "~/repositories"))
  (setq projectile-project-root-functions
        '(projectile-root-local
          ejb/projectile-root-qchem
          projectile-root-bottom-up
          projectile-root-top-down
          projectile-root-top-down-recurring))
  (setq projectile-project-root-files-bottom-up
        (ejb/conditional-prepend projectile-project-root-files-bottom-up
                                 '(".ccls-root")))
  (setq projectile-project-root-files-top-down-recurring
        (ejb/conditional-prepend projectile-project-root-files-top-down-recurring
                                 '("compile_commands.json")))
  (setq projectile-globally-ignored-directories
        (ejb/conditional-prepend projectile-globally-ignored-directories
                                 '(".ccls-cache"
                                   ".clangd"
                                   "build"
                                   "CMakeFiles")))
  (setq projectile-globally-ignored-files
        (ejb/conditional-prepend projectile-globally-ignored-files
                                 '("cmake_install.cmake")))
  :init
  (projectile-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package direnv
  :init
  (direnv-mode))
#+END_SRC

* TRAMP

- Only set =tramp-verbose= while debugging, otherwise you'll think TRAMP is slow for the wrong reason.

Links:
- https://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html
- https://www.emacswiki.org/emacs/TrampMode

#+BEGIN_SRC emacs-lisp
;; Setting this to true would be ideal (so that a reformatter can be applied
;; remotely), but it causes saving to hang.
(setq auto-revert-remote-files nil)
(setq tramp-default-method "ssh")
;; (setq tramp-verbose 8)
(setq vc-handled-backends (delq 'Git vc-handled-backends))
(require 'tramp)
(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
(use-package counsel-tramp)
#+END_SRC

* Spelling

- ispell and flyspell are intentionally intermingled
- TODO ensure backend is =aspell=?

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :config
  (setq langtool-default-language "en-US")
  (setq langtool-mother-tongue "en")
  ;; TODO update
  (if (eq system-type 'darwin)
      (setq langtool-language-tool-server-jar "/usr/local/Cellar/languagetool/4.7/libexec/languagetool-server.jar"
            langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.7/libexec/languagetool-commandline.jar"))
  ;; Arch Linux
  (if (eq system-type 'gnu/linux)
      (setq ; langtool-language-tool-server-jar "/usr/share/java/languagetool/languagetool-server.jar"
            langtool-language-tool-jar "/usr/share/java/languagetool/languagetool-commandline.jar"
            langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*")))

;; built-in
(use-package flyspell
  :hook ((text-mode . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :bind (("C-'" . ispell-word)
         ("C-M-'" . flyspell-buffer))
  :config
  (setq ispell-silently-savep t)
  (setq flyspell-issue-welcome-flag nil)
  (setq flyspell-mode-line-string " FlyS"))
#+end_src

** word count

#+BEGIN_SRC emacs-lisp
(use-package wc-mode
  :bind (("C-c w" . wc-mode)))
#+END_SRC

* Completion and language servers

#+BEGIN_SRC emacs-lisp
(use-package company
  :hook (after-init . global-company-mode)
  :bind
  ("M-]" . company-complete)
  (:map company-active-map
         ("M-/" . company-other-backend)
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous))
  :config
  ;; These are company backends I know I'll never use, so remove them if
  ;; present.
  (setq ejb/company-backends-to-remove
        '(company-bbdb
          company-eclim
          company-xcode
          company-oddmuse))
  ;; Partial ordering of (future) backends from most to least important.
  ;;
  ;; - For Python, prefer the language server over `anaconda-mode' if
  ;;   possible.
  ;;
  ;; - For Nim, nimsuggest seems to give much better results than nimlsp. But
  ;;   it times out too much.
  (setq ejb/company-ordering
        '(company-capf
          company-nimsuggest
          company-anaconda))
  (setq company-backends
        (seq-filter
         (lambda (backend)
           (not (member backend ejb/company-backends-to-remove)))
         company-backends))
  (setq company-dabbrev-downcase nil)
  (setq company-idle-delay 10)
  (setq company-lighter-base "cmp")
  (setq company-minimum-prefix-length 0)
  (setq company-search-regexp-function #'company-search-words-regexp)
  (setq company-selection-wrap-around t)
  (setq company-tooltip-align-annotations t)
  (setq company-transformers '(company-sort-by-backend-importance))
  :init
  (defun ejb/fix-company-ordering ()
    (with-eval-after-load 'company
      (setq company-backends
            (-sort '(lambda (e1 e2)
                      (funcall (-rpartial 'ejb/comparator ejb/company-ordering) e1 e2))
                   company-backends)))))

(use-package company-prescient
  :hook (after-init . company-prescient-mode))

(use-package lsp-mode
  :commands lsp
  :hook ((c-mode c++-mode fortran-mode f90-mode sh-mode) . lsp)
  :config
  (setq lsp-keep-workspace-alive nil)
  (setq lsp-enable-snippet nil)
  (setq lsp-auto-guess-root t)
  ;; TODO specifically clangd is annoying, turn this back on when I know how
  ;; to selectively change this if a .clang-format is present somewhere
  ;; between pwd and the project root
  (setq lsp-enable-on-type-formatting nil)
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-lens-enable nil)
  (setq lsp-file-watch-threshold 500000))

(use-package lsp-ui
  :disabled t
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-include-signature t)
  (setq lsp-ui-flycheck-enable t)
  (setq lsp-ui-peek-always-show t))
#+END_SRC

* Debuggers

#+BEGIN_SRC emacs-lisp
(use-package realgud)
;; TODO load this when in Python and realgud has been loaded
(use-package realgud-ipdb)
#+END_SRC

* Flycheck

** General

#+begin_src emacs-lisp
(use-package flycheck
  :bind (("C-c f" . flycheck-mode))
  :config
  (setq flycheck-check-syntax-automatically '(mode-enabled save))
  (setq flycheck-checker-error-threshold 1500)
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  ; (setq flycheck-clang-pedantic t)
  ; (setq flycheck-clang-pedantic-errors t)
  (setq flycheck-gcc-openmp t)
  ; (setq flycheck-gcc-pedantic t)
  ; (setq flycheck-gcc-pedantic-errors t)
  ; (setq flycheck-cppcheck-checks '("all"))
  (setq flycheck-markdown-mdl-style "~/.mdlrc")
  :init
  (global-flycheck-mode))
#+end_src

** Prose

Integration with [[https://github.com/errata-ai/vale][vale]].

#+BEGIN_SRC emacs-lisp
(use-package flycheck-vale
  :disabled t
  :if (executable-find "vale")
  :hook (flycheck-mode . flycheck-vale-setup))
#+END_SRC

* Diffing (built-in)

#+begin_src emacs-lisp
(setq diff-advance-after-apply-hunk nil)
(setq diff-font-lock-prettify t)
#+end_src

* Git/version control

** General

#+BEGIN_SRC emacs-lisp
;; Even though VC systems (at least git) commit the symbolic link pointer
;; itself, and not the file it's pointing to, I want to edit the file.
(setq vc-follow-symlinks t)
#+END_SRC

** Git

- [[https://magit.vc/manual/magit/Getting-started.html][magit: Getting Started]]
- https://www.youtube.com/watch?v=7ywEgcbaiys&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&index=18

#+BEGIN_SRC emacs-lisp
(use-package git-commit
  :init
  (require 'git-commit))
(use-package git-modes)
(use-package magit
  :bind (("C-x g" . magit-status)))
(use-package magit-delta
  :disabled t
  :hook (magit-mode . magit-delta-mode))
(use-package magit-svn
  :disabled t
  :hook magit-mode)
(use-package git-timemachine)
#+END_SRC

* Pandoc

#+begin_src emacs-lisp
(use-package pandoc-mode
  :hook (pandoc-mode . pandoc-load-default-settings))
#+end_src

* Org

#+begin_src emacs-lisp
;; http://orgmode.org/manual/Code-evaluation-security.html
;; (defun ejb/my-org-confirm-babel-evaluate (lang body)
;;   (not (equal lang "latex")))

(use-package org
  ;; Give up on trying to use the latest one, which doesn't load properly with
  ;; straight.
  :straight (org :type built-in)
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :config
  (setq org-adapt-indentation nil)
  (setq org-agenda-files '("~/development/qchem_lab_notebook"))
  (setq org-babel-tangle-lang-exts '(("emacs-lisp" . "el")
                                     ("elisp" . "el")
                                     ("javascript" . "js")
                                     ("js" . "js")
                                     ("python" . "py")))
  (setq org-clock-persist t)
  (setq org-closed-keep-when-no-todo t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-descriptive-links nil)
  (setq org-duration-format 'h:mm)
  (setq org-edit-src-content-indentation 0)
  (setq org-export-backends '(ascii html icalendar latex md))
  (setq org-export-dispatch-use-expert-ui t)
  (setq org-export-with-smart-quotes t)
  ;; http://stackoverflow.com/questions/17239273/org-mode-buffer-latex-syntax-highlighting
  (setq org-highlight-latex-and-relatex '(latex script entities))
  (setq org-html-with-latex '(mathjax))
  (setq org-image-actual-width nil)
  (setq org-latex-create-formula-image-program 'imagemagick)
  ;; The differences from the default are that the following packages are added:
  ;; - xcolor
  ;; - booktabs
  ;; - tabulary
  ;; - braket
  ;; - microtype
  ;; - listings
  ;; - siunitx
  ;; where xcolor needs to be loaded early for packages that would otherwise
  ;; automatically load it.  Although we later prefer minted over listings for
  ;; code formatting, listings is still very good for verbatim-like blocks.
  (setq org-latex-default-packages-alist '(("AUTO" "inputenc" t ("pdflatex"))
                                           ("T1" "fontenc" t ("pdflatex"))
                                           ("" "graphicx" t)
                                           ("" "grffile" t)
                                           ("" "longtable" nil)
                                           ("" "wrapfig" nil)
                                           ("" "rotating" nil)
                                           ("normalem" "ulem" t)
                                           ("" "amsmath" t)
                                           ("" "textcomp" t)
                                           ("" "amssymb" t)
                                           ("" "capt-of" nil)
                                           ("dvipsnames,svgnames,table" "xcolor" nil)
                                           ("" "hyperref" nil)
                                           ("" "booktabs" nil)
                                           ("" "tabulary" nil)
                                           ("" "braket" t)
                                           ("final" "microtype" nil)
                                           ("" "listings" nil)
                                           ("" "siunitx" nil)))
  (setq org-latex-hyperref-template "\\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},\n pdfsubject={%d},\n pdfcreator={%c},\n pdflang={%L},\n colorlinks=true,\n linkcolor=MidnightBlue,\n citecolor=MidnightBlue,\n urlcolor=MidnightBlue}\n")
  (setq org-latex-inline-image-rules '(("file" . "\\.\\(pdf\\|jpeg\\|jpg\\|png\\|ps\\|eps\\|tikz\\|pgf\\|svg\\|gif\\)\\'")))
  (setq org-html-mathjax-options
        '((path "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js")
          (scale "100")
          (align "center")
          (font "TeX")
          (linebreaks "false")
          (autonumber "AMS")
          (indent "0em")
          (multlinewidth "85%")
          (tagindent ".8em")
          (tagside "right")))
  (setq org-latex-pdf-process '("latexmk -pdf -xelatex -shell-escape -output-directory=%o %f"))
  (setq org-latex-tables-booktabs t)
  (setq org-list-allow-alphabetical t)
  (setq org-log-done 'time)
  (setq org-log-done-with-time t)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-startup-folded nil)
  ;; http://superuser.com/questions/299886/linewrap-in-org-mode-of-emacs
  (setq org-startup-truncated nil)
  ;; http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html
  ;; You need to install pygments to use minted.
  (when (executable-find "pygmentize")
    (add-to-list 'org-latex-packages-alist '("" "minted" nil))
    (setq org-latex-listings 'minted)
    ;; TODO these are applied in square brackets to every block, rather than using a global \mintedsetup.
    (setq org-latex-minted-options nil))
  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes '("refsheet" "\\documentclass{refsheet}"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    ;; The difference here is that xcolor options are passed in.
    (add-to-list 'org-latex-classes '("beamer" "\\documentclass[presentation,xcolor={dvipsnames,svgnames,table}]{beamer}"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
  (org-clock-persistence-insinuate))
(use-package htmlize)
(use-package ox-gfm
  :after org
  :hook (org-mode . (lambda () (require 'ox-gfm))))
(use-package ox-pandoc
  :after org
  :hook (org-mode . (lambda () (require 'ox-pandoc))))
(use-package ox-trac
  :after org
  :hook (org-mode . (lambda () (require 'ox-trac))))
#+end_src

From https://emacs.stackexchange.com/questions/20577/org-babel-load-all-languages-on-demand.

#+BEGIN_SRC emacs-lisp
(defadvice org-babel-execute-src-block (around load-language nil activate)
  "Load language if needed"
  (let ((language (org-element-property :language (org-element-at-point))))
    (unless (cdr (assoc (intern language) org-babel-load-languages))
      (add-to-list 'org-babel-load-languages (cons (intern language) t))
      (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
    ad-do-it))
#+END_SRC

Additional things of interest might be found in https://github.com/xiaohanyu/oh-my-emacs/blob/master/core/ome-org.org.

~~Every time an Org buffer is saved, automatically export it to HTML.~~  Taken from https://www.reddit.com/r/emacs/comments/4golh1/how_to_auto_export_html_when_saving_in_orgmode/.  This is more annoying than it's worth.

#+BEGIN_SRC emacs-lisp
(defun ejb/org-mode-export-hook ()
  (add-hook 'after-save-hook 'org-html-export-to-html t t))
;; (add-hook 'org-mode-hook #'org-mode-export-hook)
#+END_SRC

A function to toggle this auto-HTML-export behavior. Does this play nice with the function above?

#+BEGIN_SRC emacs-lisp
(defun ejb/toggle-org-html-export-on-save ()
  (interactive)
  (if (memq 'org-html-export-to-html after-save-hook)
      (progn
        (remove-hook 'after-save-hook 'org-html-export-to-html t)
        (message "Disabled org html export on save for current buffer..."))
    (add-hook 'after-save-hook 'org-html-export-to-html nil t)
    (message "Enabled org html export on save for current buffer...")))
#+END_SRC

* Compilation

Taken from https://emacs.stackexchange.com/questions/62/hide-compilation-window#110.

#+BEGIN_SRC emacs-lisp
(defun ejb/comint-clear ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
(bind-key (kbd "C-c l") 'ejb/comint-clear comint-mode-map)
(setq compilation-scroll-output t)
#+END_SRC

* Evaluation

#+begin_src emacs-lisp
(use-package eval-in-repl
  :bind
  (:map emacs-lisp-mode-map
        ("C-<return>" . eir-eval-in-ielm)
   :map lisp-interaction-mode-map
        ("C-<return>" . eir-eval-in-ielm)
   :map Info-mode-map
        ("C-<return>" . eir-eval-in-ielm))
  :config
  (setq eir-repl-placement 'right))
#+end_src

* C/C++

Taken from https://stackoverflow.com/a/3346308

#+begin_src emacs-lisp
;; function decides whether .h file is C or C++ header, sets C++ by
;; default because there's more chance of there being a .h without a
;; .cc than a .h without a .c (ie. for C++ template files)
(defun ejb/c-c++-header ()
  "Sets either c-mode or c++-mode, whichever is appropriate for
the header, based upon the associated source code file."
  (interactive)
  (let ((c-filename (concat (substring (buffer-file-name) 0 -1) "c")))
    (if (file-exists-p c-filename)
        (c-mode)
      (c++-mode))))
(add-to-list 'auto-mode-alist '("\\.h\\'" . ejb/c-c++-header))

(defun ejb/c-c++-toggle ()
  "Toggles a buffer between c-mode and c++-mode."
  (interactive)
  (cond ((string= major-mode "c-mode")
         (c++-mode))
        ((string= major-mode "c++-mode")
         (c-mode))))

(defconst ejb/cc-style
  '("k&r"
    (c-offsets-alist . ((innamespace . [0])))))

(c-add-style "ejb" ejb/cc-style)

(setq c-default-style
      '((java-mode . "java")
        (awk-mode . "awk")
        (other . "ejb")))
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package ccls
  :disabled t
  :after lsp-mode
  :hook ((c-mode c++-mode) . lsp))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :bind (("C-M-<tab>" . clang-format-region)))

(use-package astyle
  :when (executable-find "astyle"))
#+END_SRC

* Java

#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :hook (java-mode . lsp))
#+END_SRC

* FORTRAN

#+begin_src emacs-lisp
(setq fortran-comment-region "C")
#+end_src

* LaTeX

Lowercase functions (=latex-mode=) come from Emacs tex-mode. Mixed-case functions (=LaTeX-mode=) come from AUCTeX...kind of. From =textmodes/tex-mode.el=:
#+begin_quote
The following three autoloaded aliases appear to conflict with
AUCTeX.  However, even though AUCTeX uses the mixed case variants
for all mode relevant variables and hooks, the invocation function
and setting of `major-mode' themselves need to be lowercase for
AUCTeX to provide a fully functional user-level replacement.  So
these aliases should remain as they are, in particular since AUCTeX
users are likely to use them.
#+end_quote

#+begin_src emacs-lisp
(use-package auctex
  :hook ((latex-mode LaTeX-mode) . lsp)
  :config
  (add-to-list 'texmathp-tex-commands "dmath" 'env-on)
  (texmathp-compile)
  :init
  (setq-default TeX-master 'shared)
  ;; nil is the default; this remains here as a reminder that setting it to
  ;; true makes Emacs hang on every save when enabled.
  (setq TeX-auto-save nil)
  (setq TeX-parse-self t))
(use-package auctex-latexmk
  :config
  (setq auctex-latexmk-inherit-TeX-PDF-mode t)
  :init
  (auctex-latexmk-setup))
#+end_src

* Python

#+begin_src emacs-lisp
;; The package is "python" but the mode is "python-mode":
(use-package python
  :straight (python :type built-in)
  :mode (("\\.ipy\\'" . python-mode))
  :interpreter ("ipython" . python-mode)
  :config
  (setq python-fill-docstring-style 'pep-257-nn)
  (setq python-indent-guess-indent-offset nil)
  ;; The output from side-effects is gibberish :(
  ;; (setq python-shell-interpreter "ipython")
)

(use-package anaconda-mode
  :disabled t
  :after python
  :hook ((python-mode . anaconda-mode)
         (python-mode . anaconda-eldoc-mode)))

(use-package company-anaconda
  :disabled t
  :init
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-anaconda)
    (ejb/fix-company-ordering)))

(use-package virtualenvwrapper
  :after python)

(use-package conda
  :after delight
  :hook (after-init . conda-env-initialize-interactive-shells)
  :commands (conda-env-deactivate
             conda-env-activate
             conda-env-activate-path
             conda-env-list
             conda-env-initialize-eshell
             conda-env-activate-for-buffer))

;; TODO store Python version in variable only when conda env changes
;; (defun ejb/conda-mode-lighter ()
;;   "Only display the lighter if a conda environment is active."
;;   (if (equal conda-env-current-name nil)
;;       ""
;;     (progn
;;       (setq current-python-version
;;             (cadr
;;              (split-string
;;               (shell-command-to-string
;;                (format "%s/bin/python --version" (getenv "CONDA_PREFIX"))))))
;;       (format "conda[%s:%s]" current-python-version conda-env-current-name))))
;; (defun ejb/conda-mode-lighter ()
;;   "Only display the lighter if a conda environment is active."
;;   (if (equal conda-env-current-name nil)
;;       ""
;;     (format " conda[%s]" conda-env-current-name)))
;; TODO this delight for conda breaks elcord.
;; (delight 'python-mode '(:eval (format "Python%s" (ejb/conda-mode-lighter))) :major)

(use-package pyenv-mode
  :after python)

(use-package lsp-pyright
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))
#+end_src

** Reformatters

If ~:after python~ isn't present, the bindings don't get added properly?

#+BEGIN_SRC emacs-lisp
(use-package blacken
  :after python
  :bind
  (:map python-mode-map
        ("C-c C-b" . blacken-buffer)))

(use-package yapfify
  :after python
  :bind
  (:map python-mode-map
        ("C-c C-y b" . yapfify-buffer)
        ("C-c C-y r" . yapfify-region)))

(use-package isortify
  :after python
  :bind
  (:map python-mode-map
        ("C-c C-i" . isortify-buffer)))
#+END_SRC

** Leftovers

#+BEGIN_SRC emacs-lisp
(use-package cython-mode)
(use-package flycheck-cython)
(use-package pip-requirements)
#+END_SRC

* Markdown

Rather than use =--mathjax== with a URL argument, =--include-in-header= allows the insertion of arbitrary HTML into Pandoc's output. The =mathjax.html= file contains Chemistry Stack Exchange's header scripts for first configuring the MathJax extension to load =mhchem=, then loads MathJax.

See https://stackoverflow.com/questions/25410701/how-do-i-include-meta-tags-in-pandoc-generated-html for an example of how including arbitrary HTML works.

See https://chemistry.meta.stackexchange.com/questions/3540/what-additional-formatting-features-are-available-to-mathjax-possibly-via-requ for more information about what can be done with the MathJax extension.

#+begin_src emacs-lisp
(use-package markdown-mode
  :hook (markdown-mode . pandoc-mode)
  ;; Don't run pandoc on every save, it gets annoying.
  ;; :config
  ;; (add-hook 'markdown-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'after-save-hook 'pandoc-run-pandoc t :local)))
  :config
  (setq markdown-asymmetric-header t)
  (setq markdown-content-type "application/xhtml+xml")
  ;; This isn't super necessary since I have pandoc run a similar command
  ;; every time I save with these default arguments, but this always produces
  ;; HTML where pandoc-mode might not.
  (setq markdown-command "pandoc --from=markdown --to=html5 --highlight-style=pygments --standalone --include-in-header=/home/eric/.emacs.d/mathjax.html")
  (setq markdown-enable-math t)
  (setq markdown-fontify-code-blocks-natively t)
  (setq markdown-hide-markup nil)
  (setq markdown-hide-urls nil)
  (setq markdown-italic-underscore t)
  (setq markdown-link-space-sub-char "-"))
#+end_src

* deft

Taken conveniently from [[http://jblevins.org/projects/deft/][Jason Blevins' website]] and http://pragmaticemacs.com/emacs/make-quick-notes-with-deft/.

#+begin_src emacs-lisp
(use-package deft
  :bind (("C-c d" . deft))
  :config
  (setq deft-auto-save-interval 60.0)
  ;; "${HOME}/Dropbox/Notes" doesn't work, why is that?
  (setq deft-directory "~/Dropbox/Notes")
  (setq deft-default-extension "md")
  (setq deft-extensions '("txt" "text" "utf8" "taskpaper" "md" "markdown" "org" "tex"))
  (setq deft-recursive t)
  (setq deft-text-mode 'gfm-mode)
  (setq deft-time-format " %Y-%m-%d %H:%M:%S")
  (setq deft-use-filename-as-title t)
  (setq deft-use-filter-string-as-filename t))
#+end_src

https://stackoverflow.com/a/35450025/3249688

#+BEGIN_SRC emacs-lisp
(defun yashi/new-scratch-buffer-in-org-mode ()
  (interactive)
  (switch-to-buffer (generate-new-buffer-name "*temp*"))
  (org-mode))
(bind-key "<f7>" 'yashi/new-scratch-buffer-in-org-mode)

(defun yashi/deft-new-file ()
  (interactive)
  (let ((deft-filter-regexp nil))
    (deft-new-file)))
(bind-key "<f6>" 'yashi/deft-new-file)
#+END_SRC

* CMake

This section needs to come after the Markdown section so that CMake files get recognized properly.

#+begin_src emacs-lisp
(use-package cmake-mode
  :hook (cmake-mode . lsp)
  :config
  (setq cmake-tab-width 4))
#+end_src

* Shell Scripts

https://www.reddit.com/r/emacs/comments/5tzub2/improving_shellscriptmode_highlight/

#+BEGIN_SRC emacs-lisp
(defconst sh-mode--string-interpolated-variable-regexp
  "{\\$[^}\n\\\\]*\\(?:\\\\.[^}\n\\\\]*\\)*}\\|\\${\\sw+}\\|\\$\\sw+")

(defun ejb/sh-mode--string-interpolated-variable-font-lock-find (limit)
  (while (re-search-forward sh-mode--string-interpolated-variable-regexp limit t)
    (let ((quoted-stuff (nth 3 (syntax-ppss))))
      (when (and quoted-stuff (member quoted-stuff '(?\" ?`)))
        (put-text-property (match-beginning 0) (match-end 0)
                           'face 'font-lock-variable-name-face))))
  nil)

;; TODO I'm not sure why this doesn't work.
;; (with-eval-after-load 'sh-mode
;;   (font-lock-add-keywords 'sh-mode
;;                           `(sh-mode--string-interpolated-variable-font-lock-find)
;;                           'append))
(font-lock-add-keywords 'sh-mode
                        `((ejb/sh-mode--string-interpolated-variable-font-lock-find))
                        'append)

;; This doesn't work because it only finds the first instance.
;; (font-lock-add-keywords 'sh-mode '(("\".*?\\(\\${.*?}\\).*?\"" 1 font-lock-variable-name-face prepend)))
#+END_SRC

* EditorConfig

http://editorconfig.org/

TODO How to make this take precedence over =dtrt-indent=?

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :hook ((prog-mode text-mode) . editorconfig-mode)
  :config
  (defun ejb/editorconfig-has-editorconfig ()
    "If there is an .editorconfig file associated with the
current buffer, return its path, otherwise nil."
    (if buffer-file-name
        (let* ((directory (file-name-directory buffer-file-name))
               (file (editorconfig-core-get-nearest-editorconfig directory)))
          file)))
  (defun ejb/editorconfig-mode-lighter ()
    "Only display the lighter if an .editorconfig file has been found."
    (if (ejb/editorconfig-has-editorconfig)
        " EC"
      ""))
  ;; TODO This is disabled until it can be integrated with Projectile. Doing
  ;; the naive search with `editorconfig-core-get-nearest-editorconfig` is
  ;; death over TRAMP.
  ;; :delight '(:eval (ejb/editorconfig-mode-lighter))
  :delight)
#+END_SRC

* Conf (builtin)

#+BEGIN_SRC emacs-lisp
(use-package conf-mode
  :mode
  ; generic
  ((".nanorc" . conf-space-mode)
   (".coveragerc" . conf-unix-mode)
   ; Python tools (linter config)
   (".flake8" . conf-unix-mode)
   (".pylintrc" . conf-unix-mode)
   (".style.yapf" . conf-unix-mode)))
#+END_SRC

* XML (builtin)

#+BEGIN_SRC emacs-lisp
(use-package nxml
  :mode (("\\.rdf\\'" . nxml-mode)
         ("\\.xmp\\'" . nxml-mode)))
#+END_SRC

* MATLAB/Octave (builtin)

TODO disable .m files from loading as Objective-C

#+BEGIN_SRC emacs-lisp
(setq octave-block-offset 4)
#+END_SRC

* Julia

#+BEGIN_SRC emacs-lisp
(use-package julia-mode)
;; Snail requires vterm
(use-package vterm
  :config
  (setq vterm-always-compile-module t))
(use-package julia-snail
  :hook (julia-mode . julia-snail-mode))
(use-package lsp-julia
  :hook (julia-mode . (lambda ()
                        (require 'lsp-julia)
                        (lsp)))
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.7"))
#+END_SRC

* YAML

- [[https://asdf.readthedocs.io/][Advanced Scientific Data Format]] files are based on YAML.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  ;; A decent assumption for ISI-specific pseudo-YAML files.
  :mode (("\\.params\\'" . yaml-mode)
         ("\\.clang-format\\'" . yaml-mode)
         ("\\.asdf\\'" . yaml-mode)
         ("CITATION.cff" . yaml-mode)))
#+END_SRC

* JSON

#+BEGIN_SRC emacs-lisp
;; (use-package json
;;   :straight (json :type built-in)
;;   :mode (("\\.cjson\\'" . json-mode)
;;          ("\\.qcjson\\'" . json-mode)
;;          ("\\.qcschema\\'" . json-mode)))
(use-package jq-format
  :config
  (setq jq-format-extra-args '("--indent 4")))
#+END_SRC

* HTML

#+BEGIN_SRC emacs-lisp
(use-package web-mode)
(use-package jinja2-mode
  :mode (("\\.j2\\'" . jinja2-mode)))
(use-package web-beautify
  :disabled t
  :config
  (eval-after-load 'js2-mode
    '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
  (eval-after-load 'json-mode
    '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))
  (eval-after-load 'sgml-mode
    '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))
  (eval-after-load 'css-mode
    '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css)))
#+END_SRC

* Rust

#+BEGIN_SRC emacs-lisp
(use-package rustic
  :bind (:map rustic-mode-map
              ("C-c C-c C-;" . rustic-docstring-around-dwim)
              ("C-c C-c C-d" . rustic-cargo-build-doc))
  :config
  (setq rustic-ansi-faces ansi-color-names-vector)
  (setq rustic-format-trigger 'on-save)
  (setq rustic-indent-method-chain t)
  (defun rustic-docstring-around-dwim ()
    "Use `comment-dwim' to make a Rust docstring for the thing surrounding the comment.

Such comments are mostly for module- or crate-level documentation.
See https://doc.rust-lang.org/rustdoc/how-to-write-documentation.html for more information."
    (interactive)
    (let ((comment-start "//! "))
      (call-interactively 'comment-dwim))))
#+END_SRC

* Scheme/Lisp

#+begin_src emacs-lisp
(use-package paredit
  :hook ((emacs-lisp-mode
          inferior-emacs-lisp-mode
          lisp-mode
          scheme-mode
          cider-repl-mode
          clojure-mode
          hy-mode
          racket-mode
          slime-mode) . paredit-mode))
#+end_src

** Emacs Lisp

#+begin_src emacs-lisp
(use-package cask-mode)
#+end_src

** Common Lisp

#+BEGIN_SRC emacs-lisp
(use-package slime
  :config
  (setq common-lisp-style-default "modern")
  ;; default is "lisp", which on my Arch Linux machine is CMUCL
  (setq inferior-lisp-program "sbcl")
  (setq lisp-indent-function 'common-lisp-indent-function)
  (setq slime-contribs '(slime-cl-indent slime-fancy))
  :init
  (require 'slime-autoloads))
#+END_SRC

** Hy

#+BEGIN_SRC emacs-lisp
(use-package hy-mode
  :disabled t)
#+END_SRC

** Scheme and Racket

#+BEGIN_SRC emacs-lisp
(use-package geiser-chez)
(use-package geiser-chibi)
(use-package geiser-guile)
(use-package geiser-mit)
(use-package scribble-mode
  :hook (scribble-mode . geiser))
(use-package racket-mode)
#+END_SRC

** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode
  :hook (clojure-mode . lsp)
  :config
  (defun cider-interactive-notify-and-eval (code)
    (interactive)
    (message code)
    (cider-interactive-eval
     code
     (cider-interactive-eval-handler nil (point))
     nil
     nil))
  (defun notespace/eval-and-realize-note-at-this-line ()
    (interactive)
    (save-buffer)
    (cider-interactive-notify-and-eval
     (concat "(notespace.api/eval-and-realize-note-at-line "
             (number-to-string (line-number-at-pos))
             ")")))
  (defun notespace/eval-and-realize-notes-from-this-line ()
    (interactive)
    (save-buffer)
    (cider-interactive-notify-and-eval
     (concat "(notespace.api/eval-and-realize-notes-from-line "
             (number-to-string (line-number-at-pos))
             ")")))
  (defun notespace/eval-and-realize-notes-from-change ()
    (interactive)
    (save-buffer)
    (cider-interactive-notify-and-eval
     (concat "(notespace.api/eval-and-realize-notes-from-change)")))
  (defun notespace/init-with-browser ()
    (interactive)
    (save-buffer)
    (cider-interactive-notify-and-eval
     (concat "(notespace.api/init-with-browser)")))
  (defun notespace/init ()
    (interactive)
    (save-buffer)
    (cider-interactive-notify-and-eval
     (concat "(notespace.api/init)")))
  (defun notespace/eval-this-notespace ()
    (interactive)
    (save-buffer)
    (cider-interactive-notify-and-eval
     "(notespace.api/eval-this-notespace)"))
  (defun notespace/eval-and-realize-this-notespace ()
    (interactive)
    (save-buffer)
    (cider-interactive-notify-and-eval
     "(notespace.api/eval-and-realize-this-notespace)"))
  (defun notespace/render-static-html ()
    (interactive)
    (cider-interactive-notify-and-eval
     "(notespace.api/render-static-html)"))
  :bind (:map clojure-mode-map
              ("C-c n e" . notespace/eval-this-notespace)
              ("C-c n r" . notespace/eval-and-realize-this-notespace)
              ("C-c n n" . notespace/eval-and-realize-note-at-this-line)
              ("C-c n f" . notespace/eval-and-realize-notes-from-this-line)
              ("C-c n i b" . notespace/init-with-browser)
              ("C-c n i i" . notespace/init)
              ("C-c n s" . notespace/render-static-html)
              ("C-c n c" . notespace/eval-and-realize-notes-from-change)))
(use-package cider)
(use-package flycheck-clojure)
#+end_src

* Semantic web: SPARQL/Turtle

#+BEGIN_SRC emacs-lisp
(use-package sparql-mode
  :disabled t
  :mode (("\\.sparql\\'" . sparql-mode)
         ("\\.rq\\'" . sparql-mode)))
;; TODO company-sparql
(use-package ttl-mode
  :disabled t
  :straight (ttl-mode :type git :flavor melpa :host github :repo "nxg/ttl-mode")
  :delight "N3/Turtle"
  :mode (("\\.n3\\'" . ttl-mode)    ; Notation3
         ("\\.nt\\'" . ttl-mode)    ; N-Triples
         ("\\.shacl\\'" . ttl-mode) ; SHACL (not a graph, but constraints; looks similar)
         ("\\.ttl\\'" . ttl-mode)   ; Turtle (Terse RDF Triple Language)
         ("\\.turtle\\'" . ttl-mode)))
#+END_SRC

* Nim

=flycheck-nimsuggest=, despite being "old", is required by =nimsuggest-mode=.

#+BEGIN_SRC emacs-lisp
(use-package flycheck-nimsuggest)
(use-package nim-mode
  :bind (:map nim-mode-map ("C-c C-;" . ejb/nim-docstring-dwim))
  ;; We want to be able to "fix" the company backend ordering after
  ;; `nimsuggest-mode' adds `company-nimsuggest' to `company-backends', so the
  ;; hooks need to be in this order.
  :hook ((nim-mode . ejb/fix-company-ordering)
         (nim-mode . nimsuggest-mode)
         (nim-mode . lsp))
  :config
  (defun ejb/nim-docstring-dwim ()
    "Use `comment-dwim' to make a Nim docstring."
    (interactive)
    (let ((comment-start "## "))
      (call-interactively 'comment-dwim))))
#+END_SRC

* Other languages, modes, and packages

#+BEGIN_SRC emacs-lisp
(use-package chapel-mode
  :disabled t)
(use-package coconut-mode
  :disabled t
  :straight (:host github
             ;; "main" is NickSeagull, alternate (not working) is "padawanphysicist"
             :repo "NickSeagull/coconut-mode")
  :mode ("\\.coco\\'" . coconut-mode))
(use-package dockerfile-mode)
(use-package docker-tramp)
(use-package graphviz-dot-mode)
(use-package groovy-mode)
(use-package lox-mode
  :disabled t)
(use-package lua-mode
  :disabled t)
(use-package meson-mode)
(use-package nix-mode)
(use-package pacfiles-mode)
(use-package opencl-mode
  :disabled t)
(use-package pdf-tools)
(use-package pkgbuild-mode
  :config
  (setq pkgbuild-update-sums-on-save nil))
(use-package snakemake-mode
  :disabled t)
(use-package systemd)
(use-package vagrant-tramp)
#+END_SRC

* External services

** Discord

#+BEGIN_SRC emacs-lisp
(load "~/dotfiles/dotfiles-private/work-hostnames.el")
(use-package elcord
  :disabled t
  ;; No work machines
  :if (not (ejb/is-work-machine))
  :config
  (setq elcord-use-major-mode-as-main-icon t)
  :init
  (elcord-mode))
#+END_SRC

** Wakatime

#+BEGIN_SRC emacs-lisp
(use-package wakatime-mode
  :if (executable-find "wakatime")
  :delight
  :config
  (setq wakatime-cli-path (executable-find "wakatime"))
  :init
  (global-wakatime-mode))
#+END_SRC
